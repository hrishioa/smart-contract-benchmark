{
 "0xae506bb28ed79b29c6968ab527d1efdc5f399331": {
  "name": "WavesPresale", 
  "transactions": "13018", 
  "source": "contract WavesPresale {\r\n    address public owner;\r\n    \r\n    struct Sale\r\n    {\r\n        uint amount;\r\n        uint date;\r\n    }\r\n\r\n    mapping (bytes16 => Sale[]) public sales;\r\n    uint32 public numberOfSales;\r\n    uint public totalTokens;\r\n\r\n    function WavesPresale() {\r\n        owner = msg.sender;\r\n        numberOfSales = 0;\r\n    }\r\n\r\n    function changeOwner(address newOwner) {\r\n        if (msg.sender != owner) return;\r\n\r\n        owner = newOwner;\r\n    }\r\n\r\n    function newSale(bytes16 txidHash, uint amount, uint timestamp) {\r\n        if (msg.sender != owner) return;\r\n\r\n        sales[txidHash].push(Sale({\r\n                    amount: amount,\r\n                    date: timestamp\r\n                }));\r\n        numberOfSales += 1;\r\n        totalTokens += amount;\r\n    }\r\n\r\n    function getNumOfSalesWithSameId(bytes16 txidHash) constant returns (uint) {\r\n        return sales[txidHash].length;\r\n    }\r\n\r\n    function getSaleDate(bytes16 txidHash, uint num) constant returns (uint, uint) {\r\n    \treturn (sales[txidHash][num].amount, sales[txidHash][num].date);\r\n    }\r\n\r\n    function () {\r\n        // This function gets executed if a\r\n        // transaction with invalid data is sent to\r\n        // the contract or just ether without data.\r\n        // We revert the send so that no-one\r\n        // accidentally loses money when using the\r\n        // contract.\r\n        throw;\r\n    }\r\n\r\n}", 
  "bytecode": "606060405260008054600160a060020a031916331790556002805463ffffffff191690556102a9806100316000396000f36060604052361561006c5760e060020a6000350463025bbbe5811461007457806321745c151461009b5780637e1c0c09146100aa5780638da5cb5b146100b3578063904e1c88146100c5578063a6f9dae114610106578063a8893a6e14610127578063ac92fdb514610144575b6101a8610002565b6101a860043560243560443560005433600160a060020a0390811691161461024757610242565b61013a60025463ffffffff1681565b61013a60035481565b61013a600054600160a060020a031681565b6101aa600435602435600160205260008281526040902080548290811015610002575060009081526020902060029091020180546001919091015490915082565b6101a860043560005433600160a060020a039081169116146101c7576101e7565b6004356000908152600160205260409020545b6060908152602090f35b6101aa6004356024356000828152600160205260408120805482919084908110156100025750805481835260208320600286020154868452919085908110156100025790600052602060002090600202016000506001015490925090509250929050565b005b604051808381526020018281526020019250505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff1916821790555b50565b5050509190906000526020600020906002020160005060a06040526060849052608083905283815560019081018390556002805463ffffffff19811663ffffffff919091169092019190911790555060038054830190555b505050565b6000838152600160208190526040909120805491820180825590919082818380158290116101ea576002028160020283600052602060002091820191016101ea91905b808211156102a557600080825560019190910190815561028a565b509056", 
  "address": "0xae506bb28ed79b29c6968ab527d1efdc5f399331", 
  "balance": "0 Ether"
 }, 
 "0x1e143b2588705dfea63a17f2032ca123df995ce0": {
  "name": "SafeConditionalHFTransfer", 
  "transactions": "8944", 
  "source": "contract ClassicCheck {\r\n       function isClassic() constant returns (bool isClassic);\r\n}\r\n\r\ncontract SafeConditionalHFTransfer {\r\n\r\n    bool classic;\r\n    \r\n    function SafeConditionalHFTransfer() {\r\n        classic = ClassicCheck(0x882fb4240f9a11e197923d0507de9a983ed69239).isClassic();\r\n    }\r\n    \r\n    function classicTransfer(address to) {\r\n        if (!classic) \r\n            msg.sender.send(msg.value);\r\n        else\r\n            to.send(msg.value);\r\n    }\r\n    \r\n    function transfer(address to) {\r\n        if (classic)\r\n            msg.sender.send(msg.value);\r\n        else\r\n            to.send(msg.value);\r\n    }\r\n    \r\n}", 
  "bytecode": "60606040525b73882fb4240f9a11e197923d0507de9a983ed6923973ffffffffffffffffffffffffffffffffffffffff166337b0574a604051817c01000000000000000000000000000000000000000000000000000000000281526004018090506020604051808303816000876161da5a03f11560025750505060405180519060200150600060006101000a81548160ff021916908302179055505b61017f806100a96000396000f360606040526000357c0100000000000000000000000000000000000000000000000000000000900480631a69523014610044578063565a2ecf1461005c57610042565b005b61005a6004808035906020019091905050610074565b005b61007260048080359060200190919050506100f9565b005b600060009054906101000a900460ff16156100c1573373ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f19350505050506100f5565b8073ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f19350505050505b5b50565b600060009054906101000a900460ff161515610147573373ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050505061017b565b8073ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f19350505050505b5b5056", 
  "address": "0x1e143b2588705dfea63a17f2032ca123df995ce0", 
  "balance": "0<b>.</b>973785799153 Ether"
 }, 
 "0x57d90b64a1a57749b0f932f1a3395792e12e7055": {
  "name": "Elcoin", 
  "transactions": "21928", 
  "source": "contract Ambi {\r\n    function getNodeAddress(bytes32 _name) constant returns (address);\r\n    function addNode(bytes32 _name, address _addr) external returns (bool);\r\n    function hasRelation(bytes32 _from, bytes32 _role, address _to) constant returns (bool);\r\n}\r\n\r\ncontract PotRewards {\r\n    function transfer(address _from, address _to, uint _amount);\r\n}\r\n\r\ncontract PosRewards {\r\n    function transfer(address _from, address _to);\r\n}\r\n\r\ncontract ElcoinInterface {\r\n    function rewardTo(address _to, uint _amount) returns (bool);\r\n}\r\n\r\ncontract EtherTreasuryInterface {\r\n    function withdraw(address _to, uint _value) returns(bool);\r\n}\r\n\r\ncontract MetaCoinInterface {\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approved(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Unapproved(address indexed _owner, address indexed _spender);\r\n\r\n\tfunction totalSupply() constant returns (uint256 supply){}\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance){}\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success){}\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success){}\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success){}\r\n\tfunction unapprove(address _spender) returns (bool success){}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining){}\r\n}\r\n\r\ncontract ElcoinDb {\r\n    function getBalance(address addr) constant returns(uint balance);\r\n    function deposit(address addr, uint amount, bytes32 hash, uint time) returns (bool res);\r\n    function withdraw(address addr, uint amount, bytes32 hash, uint time) returns (bool res);\r\n}\r\n\r\ncontract AmbiEnabled {\r\n    Ambi ambiC;\r\n    bytes32 public name;\r\n\r\n    modifier checkAccess(bytes32 _role) {\r\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\r\n            _\r\n        }\r\n    }\r\n    \r\n    function getAddress(bytes32 _name) constant returns (address) {\r\n        return ambiC.getNodeAddress(_name);\r\n    }\r\n\r\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\r\n        if(address(ambiC) != 0x0){\r\n            return false;\r\n        }\r\n        Ambi ambiContract = Ambi(_ambi);\r\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\r\n            bool isNode = ambiContract.addNode(_name, address(this));\r\n            if (!isNode){\r\n                return false;\r\n            }   \r\n        }\r\n        name = _name;\r\n        ambiC = ambiContract;\r\n        return true;\r\n    }\r\n\r\n    function remove() checkAccess(\"owner\") {\r\n        suicide(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Elcoin is AmbiEnabled, MetaCoinInterface {\r\n\r\n    event Error(uint8 indexed code, address indexed origin, address indexed sender);\r\n\r\n    mapping (address => uint) public recoveredIndex;\r\n    address[] public recovered;\r\n\r\n    uint public totalSupply;\r\n    uint public absMinFee; // set up in 1/1000000 of Elcoin\r\n    uint public feePercent; // set up in 1/100 of percent, 10 is 0.1%\r\n    uint public absMaxFee; // set up in 1/1000000 of Elcoin\r\n    address public feeAddr;\r\n\r\n    function Elcoin() {\r\n        recovered.length++;\r\n        feeAddr = tx.origin;\r\n        _setFeeStructure(0, 0, 1);\r\n    }\r\n\r\n    function _db() internal constant returns (ElcoinDb) {\r\n        return ElcoinDb(getAddress(\"elcoinDb\"));\r\n    }\r\n\r\n    function _setFeeStructure(uint _absMinFee, uint _feePercent, uint _absMaxFee) internal returns (bool) {\r\n        if(_absMinFee < 0 || _feePercent < 0 || _feePercent > 10000 || _absMaxFee < 0 || _absMaxFee < _absMinFee) {\r\n            Error(1, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n        absMinFee = _absMinFee;\r\n        feePercent = _feePercent;\r\n        absMaxFee = _absMaxFee;\r\n        return true;\r\n    }\r\n\r\n    function _rawTransfer(ElcoinDb _db, address _from, address _to, uint _value) internal {\r\n        _db.withdraw(_from, _value, 0, 0);\r\n        uint fee = calculateFee(_value);\r\n        uint net = _value - fee;\r\n        _db.deposit(_to, net, 0, 0);\r\n\r\n        Transfer(_from, _to, _value);\r\n        if (fee > 0) {\r\n            _db.deposit(feeAddr, fee, 0, 0);\r\n        }\r\n    }\r\n\r\n    function _transfer(ElcoinDb _db, address _from, address _to, uint _value) internal returns (bool) {\r\n        if (_value < absMinFee) {\r\n            return false;\r\n        }\r\n        if (_from == _to) {\r\n            return false;\r\n        }\r\n        uint balance = _db.getBalance(_from);\r\n\r\n        if (balance < _value) {\r\n            return false;\r\n        }\r\n        _rawTransfer(_db, _from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferWithReward(ElcoinDb _db, address _from, address _to, uint _value) internal returns (bool) {\r\n        if (!_transfer(_db, _from, _to, _value)) {\r\n            Error(2, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        address pos = getAddress(\"elcoinPoS\");\r\n        address pot = getAddress(\"elcoinPoT\");\r\n        if (pos != 0x0) {\r\n            PosRewards(pos).transfer(_from, _to);\r\n        }\r\n        if (pot != 0x0) {\r\n            PotRewards(pot).transfer(_from, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _recoverAccount(ElcoinDb _db, address _old, address _new) internal returns (bool) {\r\n        uint pos =  recovered.length++;\r\n        recovered[pos] = _old;\r\n        recoveredIndex[_old] = pos;\r\n        uint balance = _db.getBalance(_old);\r\n        var rv = _db.withdraw(_old, balance, 0, 0);\r\n        if (!rv) {\r\n            Error(5, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n        _db.deposit(_new, balance, 0, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier notRecoveredAccount(address _account) {\r\n        if(recoveredIndex[_account] == 0x0) {\r\n            _\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _account) constant returns (uint) {\r\n        return _db().getBalance(_account);\r\n    }\r\n\r\n    function calculateFee(uint _amount) constant returns (uint) {\r\n        uint fee = (_amount * feePercent) / 10000;\r\n\r\n        if (fee < absMinFee) {\r\n            return absMinFee;\r\n        }\r\n\r\n        if (fee > absMaxFee) {\r\n            return absMaxFee;\r\n        }\r\n\r\n        return fee;\r\n    }\r\n\r\n    function issueCoin(address _to, uint _value, uint _totalSupply) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (totalSupply > 0) {\r\n            Error(6, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        bool dep = _db().deposit(_to, _value, 0, 0);\r\n        totalSupply = _totalSupply;\r\n        return dep;\r\n    }\r\n\r\n    function batchTransfer(address[] _to, uint[] _value) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (_to.length != _value.length) {\r\n            Error(7, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        uint totalToSend = 0;\r\n        for (uint8 i = 0; i < _value.length; i++) {\r\n            totalToSend += _value[i];\r\n        }\r\n\r\n        ElcoinDb db = _db();\r\n        if (db.getBalance(msg.sender) < totalToSend) {\r\n            Error(8, tx.origin, msg.sender);\r\n            return false;\r\n        }\r\n\r\n        db.withdraw(msg.sender, totalToSend, 0, 0);\r\n        for (uint8 j = 0; j < _to.length; j++) {\r\n            db.deposit(_to[j], _value[j], 0, 0);\r\n            Transfer(msg.sender, _to[j], _value[j]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        uint startGas = msg.gas + transferCallGas;\r\n        if (!_transferWithReward(_db(), msg.sender, _to, _value)) {\r\n            return false;\r\n        }\r\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice;\r\n        return _refund(refund);\r\n    }\r\n\r\n    function transferPool(address _from, address _to, uint _value) checkAccess(\"pool\") returns (bool) {\r\n        return _transferWithReward(_db(), _from, _to, _value);\r\n    }\r\n\r\n    function rewardTo(address _to, uint _amount) checkAccess(\"reward\") returns (bool) {\r\n        bool result = _db().deposit(_to, _amount, 0, 0);\r\n        if (result) {\r\n            totalSupply += _amount;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function recoverAccount(address _old, address _new) checkAccess(\"recovery\") notRecoveredAccount(_old) returns (bool) {\r\n        return _recoverAccount(_db(), _old, _new);\r\n    }\r\n\r\n    function setFeeAddr(address _feeAddr) checkAccess(\"currencyOwner\") {\r\n        feeAddr = _feeAddr;\r\n    }\r\n\r\n    function setFee(uint _absMinFee, uint _feePercent, uint _absMaxFee) checkAccess(\"cron\") returns (bool) {\r\n        return _setFeeStructure(_absMinFee, _feePercent, _absMaxFee);\r\n    }\r\n\r\n    uint public txGasPriceLimit = 21000000000;\r\n    uint public transferCallGas = 21000;\r\n    uint public refundGas = 15000;\r\n    EtherTreasuryInterface treasury;\r\n\r\n    function setupTreasury(address _treasury, uint _txGasPriceLimit) checkAccess(\"currencyOwner\") returns (bool) {\r\n        if (_txGasPriceLimit == 0) {\r\n            return false;\r\n        }\r\n        treasury = EtherTreasuryInterface(_treasury);\r\n        txGasPriceLimit = _txGasPriceLimit;\r\n        if (msg.value > 0 && !address(treasury).send(msg.value)) {\r\n            throw;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function updateRefundGas() checkAccess(\"currencyOwner\") returns (uint) {\r\n        uint startGas = msg.gas;\r\n        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice; // just to simulate calculations, dunno if optimizer will remove this.\r\n        if (!_refund(1)) {\r\n            return 0;\r\n        }\r\n        refundGas = startGas - msg.gas;\r\n        return refundGas;\r\n    }\r\n\r\n    function setOperationsCallGas(uint _transfer) checkAccess(\"currencyOwner\") returns (bool) {\r\n        transferCallGas = _transfer;\r\n        return true;\r\n    }\r\n\r\n    function _refund(uint _value) internal returns (bool) {\r\n        if (tx.gasprice > txGasPriceLimit) {\r\n            return false;\r\n        }\r\n        return treasury.withdraw(tx.origin, _value);\r\n    }\r\n}", 
  "bytecode": "60606040526404e3b29200600955615208600a55613a98600b556003805460018101808355909190828015829011605657818360005260206000209182019101605691905b8082111560b257600081556001016044565b505060088054600160a060020a031916321790555060b69050600080600181801560c557600160a060020a03338116903216837f4be6c20aede7dc7a2a5f9377a665a16687d76e6c5c6e8016cad407f7d5218425846060a460d7565b5090565b506119ec806100de6000396000f35b50600582905560068290556007819055805b939250505056606060405236156101695760e060020a600035046306fdde03811461016b578063095ea7b31461017457806313c8a3761461018657806318160ddd146101cc5780631a1feae1146101d557806321f8a721146101de57806323b872dd1461025757806324c65f351461026d57806339e7fddc146103255780633f2f159614610337578063431e83ce146103e95780634f6d3aed146103f25780635b65b9ab146103fb57806363f80de31461052257806370a08231146106135780637948f5231461064a5780637fd6f15c1461066f57806388d695b2146106785780638f0c724c146107d657806399a5d74714610880578063a7f43779146108a9578063a9059cbb1461095e578063aa64c43b14610982578063ace3088314610a3c578063b2478cfe14610a45578063b2855b4f14610a5d578063be78bb7a14610b15578063c71cbcf314610b1e578063dd62ed3e14610174578063f8b71c6414610bf9578063fbf1f78a14610cb2575b005b610cb560015481565b610cb560043560243560005b92915050565b610cc760043560038054829081101561000257506000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0154600160a060020a031681565b610cb560045481565b610cb560095481565b610cc76004355b60408051600080547f2ade6c360000000000000000000000000000000000000000000000000000000083526004830185905292519092600160a060020a031691632ade6c36916024828101926020929190829003018187876161da5a03f115610002575050604051519150505b919050565b610cb560043560243560443560005b9392505050565b610cb56000805481908190609960020a6c31bab93932b731bca7bbb732b90290600160a060020a03168214801590610305575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15610ce4575a92503a600b600050545a850301029150610ceb6001610d0c565b610cc7600854600160a060020a031681565b610cb560043560243560008054609960020a6c31bab93932b731bca7bbb732b90290600160a060020a031682148015906103d1575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15610db1578260001415610db8576000915050610180565b610cb560075481565b610cb5600b5481565b610cb5600435602435604435600080547f63726f6e0000000000000000000000000000000000000000000000000000000090600160a060020a031682148015906104a5575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b1561060b57610e2a858585600060008410806104c15750600083105b806104cd575061271083115b806104d85750600082105b806104e257508382105b156113ca5733600160a060020a031632600160a060020a031660016000805160206119cc83398151915260405180905060405180910390a4506000610266565b610cb5600435602435604435600080548190609960020a6c31bab93932b731bca7bbb732b90290600160a060020a031682148015906105c1575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15610e32576004546000901115610e3b5733600160a060020a031632600160a060020a031660066000805160206119cc83398151915260405180905060405180910390a460009250505b509392505050565b610cb56004356000610ec05b60006113e17f656c636f696e44620000000000000000000000000000000000000000000000006101e5565b610cb56004356024356000805481908190600160a060020a03168114610f3957610f31565b610cb560065481565b60408051600480358082013560208181028086018201909652818552610cb59593946024949093850192918291908501908490808284375050604080518735808a013560208181028085018201909552818452989a99604499939850919091019550935083925085019084908082843750949650505050505050600080548190819081908190609960020a6c31bab93932b731bca7bbb732b90290600160a060020a0316821480159061078b575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b156110085786518851146110145733600160a060020a031632600160a060020a031660076000805160206119cc83398151915260405180905060405180910390a4600095505061100a565b610cb560043560008054609960020a6c31bab93932b731bca7bbb732b90290600160a060020a0316821480159061086d575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15611293575050600a8190556001610252565b610cb56004355b6006546005546000916127109084020490811015611299576005549150611293565b60008054610169917f6f776e657200000000000000000000000000000000000000000000000000000091600160a060020a03161480159061094d5750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b156112ad5733600160a060020a0316ff5b610cb5600435602435600060006000600a600050545a0191506112b06112bf61061f565b610cb5600435602435604435600080547f706f6f6c0000000000000000000000000000000000000000000000000000000090600160a060020a03168214801590610a2c575060408051835460015460e460020a630a1add5102835260048301526024820184905233600160a060020a039081166044840152925192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b1561060b57610e2a6112ed61061f565b610cb560055481565b610cb560043560026020526000908152604090205481565b61016960043560008054609960020a6c31bab93932b731bca7bbb732b90291600160a060020a039190911614801590610af95750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b15610b115760088054600160a060020a031916831790555b5050565b610cb5600a5481565b610cb5600435602435600080547f7265636f7665727900000000000000000000000000000000000000000000000090600160a060020a03168214801590610bc8575081546001546040805160e460020a630a1add5102815260048101929092526024820184905233600160a060020a039081166044840152905192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15610db157600160a060020a038416600090815260026020526040812054859114156112f5576112fc61130561061f565b610cb56004356024356000805481907f726577617264000000000000000000000000000000000000000000000000000090600160a060020a03168214801590610ca5575081546001546040805160e460020a630a1add5102815260048101929092526024820184905233600160a060020a039081166044840152905192169163a1add51091606481810192602092909190829003018188876161da5a03f1156100025750506040515190505b15610f3157610d2f61061f565b60005b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b505b505090565b1515610d1e576000935050610ce6565b600b543a905a8403010290506112e6815b6009546000903a111561134f57610252565b5a8303600b8190559350610ce69050565b600160a060020a031663ec2ac54e8686600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f115610002575050604051519250508115610dac5760048054850190555b819250505b5092915050565b600c8054600160a060020a031916851790556009839055600034118015610e165750600c60009054906101000a9004600160a060020a0316600160a060020a0316600034604051809050600060405180830381858888f19350505050155b15610e2057610002565b6001915050610180565b915050610266565b50509392505050565b610e4361061f565b600160a060020a031663ec2ac54e8787600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f115610002575050604051516004869055935083925061060b915050565b600160a060020a031663f8b2cb4f836040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750506040515191506102529050565b600184815560008054600160a060020a0319168417905592505b505092915050565b84915030600160a060020a031682600160a060020a0316632ade6c36866040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f11561000257505060405151600160a060020a03169091149050610f175781600160a060020a0316637684937685306040518360e060020a0281526004018083815260200182600160a060020a03168152602001925050506020604051808303816000876161da5a03f11561000257505060405151915050801515610f175760009250610f31565b505b5050505092915050565b60009450600093505b86518460ff16101561105157868460ff1681518110156100025760209081029091010151909401936001939093019261101d565b61105961061f565b92508483600160a060020a031663f8b2cb4f336040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f11561000257505060405151919091101590506110f35733600160a060020a031632600160a060020a031660086000805160206119cc83398151915260405180905060405180910390a4600095505061100a565b82600160a060020a03166307bc6fad3387600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f11561000257506000935050505b87518260ff1610156112855782600160a060020a031663ec2ac54e898460ff1681518110156100025790602001906020020151898560ff1681518110156100025790602001906020020151600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f115610002575050885189915060ff8416908110156100025790602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef898560ff16815181101561000257604080516020928302909301820151835251918290030190a360019190910190611161565b600195505061100a565b8091505b50919050565b60075481111561128f576007549150611293565b50565b1515610cfb5760009250610f31565b3387875b6000600060006114dd878787876000600060056000505483101561178257611779565b9250610f31565b8686866112c3565b5050610180565b92505050610180565b86866003805460018101808355600092839283928392908280158290116115735781836000526020600020918201910161157391905b808211156116fd576000815560010161133b565b60408051600c547ff3fef3a300000000000000000000000000000000000000000000000000000000825232600160a060020a03908116600484015260248301869052925192169163f3fef3a39160448181019260209290919082900301816000876161da5a03f1156100025750506040515191506102529050565b506005839055600682905560078190556001610266565b905090565b9050600160a060020a0382166000146114575781600160a060020a031663ba45b0b887876040518360e060020a0281526004018083600160a060020a0316815260200182600160a060020a03168152602001925050506000604051808303816000876161da5a03f115610002575050505b600160a060020a0381166000146114ce5780600160a060020a031663beabacc88787876040518460e060020a0281526004018084600160a060020a0316815260200183600160a060020a0316815260200182815260200193505050506000604051808303816000876161da5a03f115610002575050505b600192505b5050949350505050565b151561151f5733600160a060020a031632600160a060020a031660026000805160206119cc83398151915260405180905060405180910390a4600092506114d3565b6115487f656c636f696e506f5300000000000000000000000000000000000000000000006101e5565b91506113e67f656c636f696e506f5400000000000000000000000000000000000000000000006101e5565b5050509250856003600050848154811015610002575050507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b83018054600160a060020a03191687179055600160a060020a03868116600081815260026020908152604080832088905580517ff8b2cb4f000000000000000000000000000000000000000000000000000000008152600481019490945251938b169363f8b2cb4f936024818101949183900301908290876161da5a03f1156100025750506040805180517f07bc6fad000000000000000000000000000000000000000000000000000000008252600160a060020a038a166004830152602482018190526000604483018190526064830181905292519095506307bc6fad926084838101936020939290839003909101908290876161da5a03f115610002575050604051519150508015156117015733600160a060020a031632600160a060020a031660056000805160206119cc83398151915260405180905060405180910390a4600093505b5050509392505050565b5090565b86600160a060020a031663ec2ac54e8684600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f1156100025750600195506116f3915050565b600191505b50949350505050565b83600160a060020a031685600160a060020a031614156117a55760009150611779565b85600160a060020a031663f8b2cb4f866040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f11561000257505060405151915050828110156118085760009150611779565b611774868686866000600085600160a060020a03166307bc6fad8685600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f11561000257506118879150849050610887565b9150818303905085600160a060020a031663ec2ac54e8583600060006040518560e060020a0281526004018085600160a060020a031681526020018481526020018360010281526020018281526020019450505050506020604051808303816000876161da5a03f115610002575050604080518581529051600160a060020a0387811693508816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a360008211156119c457604080516008547fec2ac54e000000000000000000000000000000000000000000000000000000008252600160a060020a039081166004830152602482018590526000604483018190526064830181905292519089169263ec2ac54e926084818101936020939092839003909101908290876161da5a03f115610002575050505b505050505050564be6c20aede7dc7a2a5f9377a665a16687d76e6c5c6e8016cad407f7d5218425", 
  "address": "0x57d90b64a1a57749b0f932f1a3395792e12e7055", 
  "balance": "0<b>.</b>000000000000019292 Ether"
 }, 
 "0x5f742383b6d1298980030d6af943b76cdd902143": {
  "name": "CompetitionStore", 
  "transactions": "6834", 
  "source": "/* Copyright (C) Etherplay <contact@etherplay.io> - All Rights Reserved */\r\npragma solidity 0.4.4;\r\n\r\ncontract CompetitionStore {\r\n\t\r\n/////////////////////////////////////////////////////////////////// DATA /////////////////////////////////////////////////////////////\r\n\t\r\n\t//player's submission store the info required to verify its accuracy\r\n\tstruct Submission{\r\n\t\tuint32 score; \r\n\t\tuint32 durationRoundedDown; // duration in second of the game session\r\n\t\tuint32 version; // version of the game used\r\n\t\tuint64 seed; //seed used\r\n\t\tuint64 submitBlockNumber; // blockNumber at which the submission is processed\r\n\t\tbytes32 proofHash;//sha256 of proof : to save gas, the proof is not saved directly in the contract. Instead its hash is saved. The actual proof will be saved on a server. The player could potentially save it too. \r\n\t}\r\n\t\r\n\t//player start game parameter\r\n\tstruct Start{\r\n\t\tuint8 competitionIndex; //competition index (0 or 1) there is only 2 current competition per game, one is active, the other one being the older one which might have pending verification\r\n\t\tuint32 version;  //version of the game that the player score is based on\r\n\t\tuint64 seed; // the seed used for the game session\r\n\t\tuint64 time; // start time , used to check if the player is not taking too long to submit its score\r\n\t}\r\n\t\r\n\t// the values representing each competition\r\n\tstruct Competition{\r\n\t\tuint8 numPastBlocks;// number of past block allowed, 1 is the minimum since you can only get the hash of a past block. Allow player to start play instantunously\r\n\t\tuint8 houseDivider; // how much the house takes : 4 means house take 1/4 (25%)\r\n\t\tuint16 lag; // define how much extra time is allowed to submit a score (to accomodate block time and delays)\r\n\t\tuint32 verificationWaitTime;// wait time allowed for submission past competition's end time \r\n\t\tuint32 numPlayers;//current number of player that submited a score\r\n\t\tuint32 version; //the version of the game used for that competition, a hash of the code is published in the log upon changing\r\n\t\tuint32 previousVersion; // previousVersion to allow smooth update upon version change\r\n\t\tuint64 versionChangeBlockNumber; \r\n\t\tuint64 switchBlockNumber; // the blockNumber at which the competition started\r\n\t\tuint64 endTime;//The time at which the competition is set to finish. No start can happen after that and the competition cannot be aborted before that\r\n\t\tuint88 price;  // the price for that competition, do not change \r\n\t\tuint128 jackpot; // the current jackpot for that competition, this jackpot is then shared among the developer (in the deposit account for  funding development) and the winners (see houseDivider))\r\n\t\tuint32[] rewardsDistribution; // the length of it define how many winners there is and the distribution of the reward is the value for each index divided by the total\r\n\t\tmapping (address => Submission) submissions;  //only one submission per player per competition\r\n\t\taddress[] players; // contain the list of players that submited a score for that competition\r\n\t}\r\n\t\t\r\n\tstruct Game{\r\n\t\tmapping (address => Start) starts; // only 1 start per player, further override the current\r\n\t\tCompetition[2] competitions; // 2 competitions only to save gas, overrite each other upon going to next competition\r\n\t\tuint8 currentCompetitionIndex; //can only be 1 or 0 (switch operation : 1 - currentCompetitionIndex)\r\n\t}\r\n\r\n\tmapping (string => Game) games;\r\n\t\r\n\taddress organiser; // admin having control of the reward \r\n\taddress depositAccount;\t // is the receiver of the house part of the jackpot (see houseDivider) Can only be changed by the depositAccount.\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////// EVENTS /////////////////////////////////////////////////////////////\r\n\r\n\t//event logging the hash of the game code for a particular version\r\n\tevent VersionChange(\r\n\t\tstring indexed gameID,\r\n\t\tuint32 indexed version,\r\n\t\tbytes32 codeHash // the sha256 of the game code as used by the player\r\n\t);\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////// PLAYERS ACTIONS /////////////////////////////////////////////////////////////\r\n\t\r\n\t/*\r\n\tThe seed is computed from the block hash and the sender address\r\n\tWhile the seed can be predicted for few block away (see : numPastBlocks) this is has no much relevance since a game session have a bigger duration,\r\n\tRemember this is not gambling game, this is a skill game, seed is only a small part of the game outcome\r\n\t*/\r\n\tfunction computeSeed(uint64 blockNumber, address player) internal constant returns(uint64 seed){ \r\n\t\treturn uint64(sha3(block.blockhash(blockNumber),block.blockhash(blockNumber-1),block.blockhash(blockNumber-2),block.blockhash(blockNumber-3),block.blockhash(blockNumber-4),block.blockhash(blockNumber-5),player)); \r\n\t}\r\n\t\r\n\t/*\r\n\t\tprobe the current state of the competition so player can start playing right away (need to commit a tx too to ensure its play will be considered though)\r\n\t*/\r\n\tfunction getSeedAndState(string gameID, address player) constant returns(uint64 seed, uint64 blockNumber, uint8 competitionIndex, uint32 version, uint64 endTime, uint88 price, uint32 myBestScore, uint64 competitionBlockNumber, uint64 registeredSeed){\r\n\t\tvar game = games[gameID];\r\n\r\n\t\tcompetitionIndex = game.currentCompetitionIndex;\r\n\t\tvar competition = game.competitions[competitionIndex];\r\n\r\n\t\tblockNumber = uint64(block.number-1);\r\n\t\tseed = computeSeed(blockNumber, player);\r\n\t\tversion = competition.version;\r\n\t\tendTime = competition.endTime;\r\n\t\tprice = competition.price;\r\n\t\tcompetitionBlockNumber = competition.switchBlockNumber;\r\n\t\t\r\n\t\tif (competition.submissions[player].submitBlockNumber >= competition.switchBlockNumber){\r\n\t\t\tmyBestScore = competition.submissions[player].score;\r\n\t\t}else{\r\n\t\t\tmyBestScore = 0;\r\n\t\t}\r\n\t\t\r\n\t\tregisteredSeed = game.starts[player].seed;\r\n\t}\r\n\t\r\n\t\r\n\t\t\r\n\tfunction start(string gameID, uint64 blockNumber,uint8 competitionIndex, uint32 version) payable {\r\n\t\tvar game = games[gameID];\r\n\t\tvar competition = game.competitions[competitionIndex];\r\n\r\n\t\tif(msg.value != competition.price){\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\tif(\r\n\t\t\tcompetition.endTime <= now || //block play when time is up \r\n\t\t\tcompetitionIndex != game.currentCompetitionIndex || //start happen just after a switch // should not be possible since endTime already ensure that a new competition cannot start before the end of the first\r\n\t\t\tversion != competition.version && (version != competition.previousVersion || block.number > competition.versionChangeBlockNumber) || //ensure version is same as current (or previous if versionChangeBlockNumber is recent)\r\n\t\t\tblock.number >= competition.numPastBlocks && block.number - competition.numPastBlocks > blockNumber //ensure start is not too old   \r\n\t\t\t){\r\n\t\t\t\t//if ether was sent, send it back if possible, else throw\r\n\t\t\t\tif(msg.value != 0 && !msg.sender.send(msg.value)){\r\n\t\t\t\t\tthrow;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tcompetition.jackpot += uint128(msg.value); //increase the jackpot\r\n\t\t\r\n\t\t//save the start params\r\n\t\tgame.starts[msg.sender] = Start({\r\n\t\t\tseed: computeSeed(blockNumber,msg.sender)\r\n\t\t\t, time : uint64(now)\r\n\t\t\t, competitionIndex : competitionIndex\r\n\t\t\t, version : version\r\n\t\t}); \r\n\t}\r\n\t\t\r\n\tfunction submit(string gameID, uint64 seed, uint32 score, uint32 durationRoundedDown, bytes32 proofHash){ \r\n\t\tvar game = games[gameID];\r\n\r\n\t\tvar gameStart = game.starts[msg.sender];\r\n\t\t\t\r\n\t\t//seed should be same, else it means double start and this one executing is from the old one \r\n\t\tif(gameStart.seed != seed){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar competition = game.competitions[gameStart.competitionIndex];\r\n\t\t\r\n\t\t// game should not take too long to be submited\r\n\t\tif(now - gameStart.time > durationRoundedDown + competition.lag){ \r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(now >= competition.endTime + competition.verificationWaitTime){\r\n\t\t\treturn; //this ensure verifier to get all the score at that time (should never be there though as game should ensure a maximumTime < verificationWaitTime)\r\n\t\t}\r\n\t\t\r\n\t\tvar submission = competition.submissions[msg.sender];\r\n\t\tif(submission.submitBlockNumber < competition.switchBlockNumber){\r\n\t\t\tif(competition.numPlayers >= 4294967295){ //unlikely but if that happen this is for now the best place to stop\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}else if (score <= submission.score){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar players = competition.players;\r\n\t\t//if player did not submit score yet => add player to list\r\n\t\tif(submission.submitBlockNumber < competition.switchBlockNumber){\r\n\t\t\tvar currentNumPlayer = competition.numPlayers;\r\n\t\t\tif(currentNumPlayer >= players.length){\r\n\t\t\t\tplayers.push(msg.sender);\r\n\t\t\t}else{\r\n\t\t\t\tplayers[currentNumPlayer] = msg.sender;\r\n\t\t\t}\r\n\t\t\tcompetition.numPlayers = currentNumPlayer + 1;\r\n\t\t}\r\n\t\t\r\n\t\tcompetition.submissions[msg.sender] = Submission({\r\n\t\t\tproofHash:proofHash,\r\n\t\t\tseed:gameStart.seed,\r\n\t\t\tscore:score,\r\n\t\t\tdurationRoundedDown:durationRoundedDown,\r\n\t\t\tsubmitBlockNumber:uint64(block.number),\r\n\t\t\tversion:gameStart.version\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\t\taccept donation payment : this increase the jackpot of the currentCompetition of the specified game\r\n\t*/\r\n\tfunction increaseJackpot(string gameID) payable{\r\n\t\tvar game = games[gameID];\r\n\t\tgame.competitions[game.currentCompetitionIndex].jackpot += uint128(msg.value); //extra ether is lost but this is not going to happen :)\r\n\t}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t\r\n/////////////////////////////////////// PRIVATE ///////////////////////////////////////////\r\n\t\t\r\n\tfunction CompetitionStore(){\r\n\t\torganiser = msg.sender;\r\n\t\tdepositAccount = msg.sender;\r\n\t}\r\n\r\n\t\r\n\t//give a starting jackpot by sending ether to the transaction\r\n\tfunction _startNextCompetition(string gameID, uint32 version, uint88 price, uint8 numPastBlocks, uint8 houseDivider, uint16 lag, uint64 duration, uint32 verificationWaitTime, bytes32 codeHash, uint32[] rewardsDistribution) payable{\r\n\t\tif(msg.sender != organiser){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tvar game = games[gameID];\r\n\t\tvar newCompetition = game.competitions[1 - game.currentCompetitionIndex]; \r\n\t\tvar currentCompetition = game.competitions[game.currentCompetitionIndex];\r\n\t\t//do not allow to switch if endTime is not over\r\n\t\tif(currentCompetition.endTime >= now){\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\t//block switch if reward was not called (numPlayers > 0)\r\n\t\tif(newCompetition.numPlayers > 0){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tif(houseDivider == 0){ \r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tif(numPastBlocks < 1){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tif(rewardsDistribution.length == 0 || rewardsDistribution.length > 64){ // do not risk gas shortage on reward\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t//ensure rewardsDistribution give always something and do not give more to a lower scoring player\r\n\t\tuint32 prev = 0;\r\n\t\tfor(uint8 i = 0; i < rewardsDistribution.length; i++){\r\n\t\t\tif(rewardsDistribution[i] == 0 ||  (prev != 0 && rewardsDistribution[i] > prev)){\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t\tprev = rewardsDistribution[i];\r\n\t\t}\r\n\r\n\t\tif(version != currentCompetition.version){\r\n\t\t\tVersionChange(gameID,version,codeHash); \r\n\t\t}\r\n\t\t\r\n\t\tgame.currentCompetitionIndex = 1 - game.currentCompetitionIndex;\r\n\t\t\r\n\t\tnewCompetition.switchBlockNumber = uint64(block.number);\r\n\t\tnewCompetition.previousVersion = 0;\r\n\t\tnewCompetition.versionChangeBlockNumber = 0;\r\n\t\tnewCompetition.version = version;\r\n\t\tnewCompetition.price = price; \r\n\t\tnewCompetition.numPastBlocks = numPastBlocks;\r\n\t\tnewCompetition.rewardsDistribution = rewardsDistribution;\r\n\t\tnewCompetition.houseDivider = houseDivider;\r\n\t\tnewCompetition.lag = lag;\r\n\t\tnewCompetition.jackpot += uint128(msg.value); //extra ether is lost but this is not going to happen :)\r\n\t\tnewCompetition.endTime = uint64(now) + duration;\r\n\t\tnewCompetition.verificationWaitTime = verificationWaitTime;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction _setBugFixVersion(string gameID, uint32 version, bytes32 codeHash, uint32 numBlockAllowedForPastVersion){\r\n\t\tif(msg.sender != organiser){\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\tvar game = games[gameID];\r\n\t\tvar competition = game.competitions[game.currentCompetitionIndex];\r\n\t\t\r\n\t\tif(version <= competition.version){ // a bug fix should be a new version (greater than previous version)\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tif(competition.endTime <= now){ // cannot bugFix a competition that already ended\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tcompetition.previousVersion = competition.version;\r\n\t\tcompetition.versionChangeBlockNumber = uint64(block.number + numBlockAllowedForPastVersion);\r\n\t\tcompetition.version = version;\r\n\t\tVersionChange(gameID,version,codeHash);\r\n\t}\r\n\r\n\tfunction _setLagParams(string gameID, uint16 lag, uint8 numPastBlocks){\r\n\t\tif(msg.sender != organiser){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tif(numPastBlocks < 1){\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\tvar game = games[gameID];\r\n\t\tvar competition = game.competitions[game.currentCompetitionIndex];\r\n\t\tcompetition.numPastBlocks = numPastBlocks;\r\n\t\tcompetition.lag = lag;\r\n\t}\r\n\r\n\tfunction _rewardWinners(string gameID, uint8 competitionIndex, address[] winners){\r\n\t\tif(msg.sender != organiser){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tvar competition = games[gameID].competitions[competitionIndex];\r\n\r\n\t\t//ensure time has passed so that players who started near the end can finish their session \r\n\t\t//game should be made to ensure termination before verificationWaitTime, it is the game responsability\r\n\t\tif(int(now) - competition.endTime < competition.verificationWaitTime){\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tif( competition.jackpot > 0){ // if there is no jackpot skip\r\n\r\n\t\t\t\r\n\t\t\tvar rewardsDistribution = competition.rewardsDistribution;\r\n\r\n\t\t\tuint8 numWinners = uint8(rewardsDistribution.length);\r\n\r\n\t\t\tif(numWinners > uint8(winners.length)){\r\n\t\t\t\tnumWinners = uint8(winners.length);\r\n\t\t\t}\r\n\r\n\t\t\tuint128 forHouse = competition.jackpot;\r\n\t\t\tif(numWinners > 0 && competition.houseDivider > 1){ //in case there is no winners (no players or only cheaters), the house takes all\r\n\t\t\t\tforHouse = forHouse / competition.houseDivider;\r\n\t\t\t\tuint128 forWinners = competition.jackpot - forHouse;\r\n\r\n\t\t\t\tuint64 total = 0;\r\n\t\t\t\tfor(uint8 i=0; i<numWinners; i++){ // distribute all the winning even if there is not all the winners\r\n\t\t\t\t\ttotal += rewardsDistribution[i];\r\n\t\t\t\t}\r\n\t\t\t\tfor(uint8 j=0; j<numWinners; j++){\r\n\t\t\t\t\tuint128 value = (forWinners * rewardsDistribution[j]) / total;\r\n\t\t\t\t\tif(!winners[j].send(value)){ // if fail give to house\r\n\t\t\t\t\t\tforHouse = forHouse + value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!depositAccount.send(forHouse)){\r\n\t\t\t\t//in case sending to house failed \r\n\t\t\t\tvar nextCompetition = games[gameID].competitions[1 - competitionIndex];\r\n\t\t\t\tnextCompetition.jackpot = nextCompetition.jackpot + forHouse;\t\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\tcompetition.jackpot = 0;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tcompetition.numPlayers = 0;\r\n\t}\r\n\r\n\t\r\n\t/*\r\n\t\tallow to change the depositAccount of the house share, only the depositAccount can change it, depositAccount == organizer at creation\r\n\t*/\r\n\tfunction _setDepositAccount(address newDepositAccount){\r\n\t\tif(depositAccount != msg.sender){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tdepositAccount = newDepositAccount;\r\n\t}\r\n\t\r\n\t/*\r\n\t\tallow to change the organiser, in case this need be \r\n\t*/\r\n\tfunction _setOrganiser(address newOrganiser){\r\n\t\tif(organiser != msg.sender){\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\torganiser = newOrganiser;\r\n\t}\r\n\t\r\n\t\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/////////////////////////////////////////////// OTHER CONSTANT CALLS TO PROBE VALUES ////////////////////////////////////////////////////\r\n\r\n\tfunction getPlayerSubmissionFromCompetition(string gameID, uint8 competitionIndex, address playerAddress) constant returns(uint32 score, uint64 seed, uint32 duration, bytes32 proofHash, uint32 version, uint64 submitBlockNumber){\r\n\t\tvar submission = games[gameID].competitions[competitionIndex].submissions[playerAddress];\r\n\t\tscore = submission.score;\r\n\t\tseed = submission.seed;\t\t\r\n\t\tduration = submission.durationRoundedDown;\r\n\t\tproofHash = submission.proofHash;\r\n\t\tversion = submission.version;\r\n\t\tsubmitBlockNumber =submission.submitBlockNumber;\r\n\t}\r\n\t\r\n\tfunction getPlayersFromCompetition(string gameID, uint8 competitionIndex) constant returns(address[] playerAddresses, uint32 num){\r\n\t\tvar competition = games[gameID].competitions[competitionIndex];\r\n\t\tplayerAddresses = competition.players;\r\n\t\tnum = competition.numPlayers;\r\n\t}\r\n\r\n\tfunction getCompetitionValues(string gameID, uint8 competitionIndex) constant returns (\r\n\t\tuint128 jackpot,\r\n\t\tuint88 price,\r\n\t\tuint32 version,\r\n\t\tuint8 numPastBlocks,\r\n\t\tuint64 switchBlockNumber,\r\n\t\tuint32 numPlayers,\r\n\t\tuint32[] rewardsDistribution,\r\n\t\tuint8 houseDivider,\r\n\t\tuint16 lag,\r\n\t\tuint64 endTime,\r\n\t\tuint32 verificationWaitTime,\r\n\t\tuint8 _competitionIndex\r\n\t){\r\n\t\tvar competition = games[gameID].competitions[competitionIndex];\r\n\t\tjackpot = competition.jackpot;\r\n\t\tprice = competition.price;\r\n\t\tversion = competition.version;\r\n\t\tnumPastBlocks = competition.numPastBlocks;\r\n\t\tswitchBlockNumber = competition.switchBlockNumber;\r\n\t\tnumPlayers = competition.numPlayers;\r\n\t\trewardsDistribution = competition.rewardsDistribution;\r\n\t\thouseDivider = competition.houseDivider;\r\n\t\tlag = competition.lag;\r\n\t\tendTime = competition.endTime;\r\n\t\tverificationWaitTime = competition.verificationWaitTime;\r\n\t\t_competitionIndex = competitionIndex;\r\n\t}\r\n\t\r\n\tfunction getCurrentCompetitionValues(string gameID) constant returns (\r\n\t\tuint128 jackpot,\r\n\t\tuint88 price,\r\n\t\tuint32 version,\r\n\t\tuint8 numPastBlocks,\r\n\t\tuint64 switchBlockNumber,\r\n\t\tuint32 numPlayers,\r\n\t\tuint32[] rewardsDistribution,\r\n\t\tuint8 houseDivider,\r\n\t\tuint16 lag,\r\n\t\tuint64 endTime,\r\n\t\tuint32 verificationWaitTime,\r\n\t\tuint8 _competitionIndex\r\n\t)\r\n\t{\r\n\t\treturn getCompetitionValues(gameID,games[gameID].currentCompetitionIndex);\r\n\t}\r\n}", 
  "bytecode": "6060604052600180546c0100000000000000000000000033810204600160a060020a031991821681179092556002805490911690911790556120c8806100456000396000f3606060405236156100ae5760e060020a600035046304029f2381146100b35780631f9ea25d1461012b578063263c0a8d1461015357806349593f53146101c8578063569aa0d8146102d257806359a4669f14610404578063656104f5146104f357806370de8c6e1461051b57806371bde852146105fb5780638d909ad9146106c55780638f30435d146107b0578063916dbc1714610807578063c91540f614610940578063fedc2a2814610c15575b610002565b3461000257610cec6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935050604435915050606435600154600090819033600160a060020a03908116911614610ff957610002565b3461000257610cec600435600254600160a060020a039081163391909116146110a857610002565b3461000257610cec6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935050604435915050600154600090819033600160a060020a039081169116146110c757610002565b3461000257610cec6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050933593505060443591505060643560843560006000600060006000600060006000508b604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150509081526020016040518091039020600050955085600001600050600033600160a060020a0316815260200190815260200160002060005094508967ffffffffffffffff168560000160059054906101000a900467ffffffffffffffff1667ffffffffffffffff1614151561131a5761130d565b3461000257610cee6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935050604435915050600060006000600060006000600060006000508a604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508960ff1660028110156100025760060201600050600160a060020a0389166000908152600491909101602052604090208054600182015463ffffffff8083169a5067ffffffffffffffff606060020a840481169a50640100000000840482169950919750604060020a830416955060a060020a90910416925090505093975093979195509350565b610cec6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506000600060005082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000509050348160010160005082600d0160009054906101000a900460ff1660ff16600281101561000257600602016000506002018054608060020a6001608060020a0382169093018302929092046001608060020a03199092169190911790555050565b3461000257610cec600435600154600160a060020a039081163391909116146114cf57610002565b610cec6004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050933593505060443591505060643560006000600060005086604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000509150816001016000508460ff16600281101561000257600602016000506001810154909150346affffffffffffffffffffff608060020a90920491909116146114ee57610002565b610cec6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805161012435808a013560208181028481018201909552818452989a8a359a6044359a6064359a50608435995060a435985060c435975060e4359661010435969395610144959301929182919085019084908082843750949650505050505050600154600090819081908190819033600160a060020a0390811691161461176057610002565b3461000257610d386004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050933593505050506000600060006000600060006000600060006000600060006000508d604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150509081526020016040518091039020600050915081600d0160009054906101000a900460ff1698508850816001016000508960ff1660028110156100025743600019019b50600602019050611c7c8a8d611620565b3461000257610daa6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350610a1092505050565b3461000257610e8a6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350505050602060405190810160405280600081526020015060006000600060005085604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508460ff16600281101561000257600602016000506005810180546040805160208084028201810190925282815293945083018282801561092057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610902575b505093549298604060020a90930463ffffffff1697509195505050505050565b3461000257610daa6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600060006000600060006000602060405190810160405280600081526020015060006000600060006000611d5c8d60006000508f604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150509081526020016040518091039020600050600d0160009054906101000a900460ff165b600060006000600060006000602060405190810160405280600081526020015060006000600060006000600060006000508f604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508e60ff166002811015610002576006020160005090508060020160009054906101000a90046001608060020a03169c508c508060010160109054906101000a90046affffffffffffffffffffff169b508b5080600001600c9054906101000a900463ffffffff169a508a508060000160009054906101000a900460ff16995089508060010160009054906101000a900467ffffffffffffffff16985088508060000160089054906101000a900463ffffffff169750875080600301600050805480602002602001604051908101604052809291908181526020018280548015610bb157602002820191906000526020600020906000905b82829054906101000a900463ffffffff1681526020019060040190602082600301049283019260010382029150808411610b7a5790505b505084546001860154949b5060ff6101008204169a5061ffff62010000820416995067ffffffffffffffff604060020a9095049490941697505063ffffffff6401000000009093049290921694508f93505050509295989b509295989b509295989b565b3461000257610cec6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437505060408051604435808a013560208181028481018201909552818452989a8a359a9099606499509397509190910194509250829190850190849080828437509496505050505050506000600060006000600060006000600060006000600160009054906101000a9004600160a060020a0316600160a060020a031633600160a060020a0316141515611d8357610002565b005b6040805163ffffffff978816815267ffffffffffffffff9687166020820152948716858201526060850193909352941660808301529290911660a082015290519081900360c00190f35b6040805167ffffffffffffffff9a8b168152988a1660208a015260ff9097168888015263ffffffff958616606089015293881660808801526affffffffffffffffffffff90921660a087015290921660c085015290841660e08401529092166101008201529051908190036101200190f35b604051808d6001608060020a031681526020018c6affffffffffffffffffffff1681526020018b63ffffffff1681526020018a60ff1681526020018967ffffffffffffffff1681526020018863ffffffff168152602001806020018760ff1681526020018661ffff1681526020018567ffffffffffffffff1681526020018463ffffffff1681526020018360ff1681526020018281038252888181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019d505050505050505050505050505060405180910390f35b60405180806020018363ffffffff1681526020018281038252848181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f150905001935050505060405180910390f35b805473ffffffff00000000000000000000000000000000198116608060020a60e060020a606060020a9384900463ffffffff908116820282900492909202929092177bffffffffffffffff0000000000000000000000000000000000000000191660a060020a60c060020a888416430181020402176fffffffff000000000000000000000000191688830292909204929092021782556040518751918716918891908190602080850191908190849082908590600090600490601f850104600302600f01f15090500191505060405180910390207fa2f4a4124ab7224b7753e37c4d34f853613a576f8e812e4f6186a6f1e80d014786604051808260001916815260200191505060405180910390a35b505050505050565b600060005086604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005091508160010160005082600d0160009054906101000a900460ff1660ff16600281101561000257600602018054909150606060020a900463ffffffff9081169086161161108657610002565b600181015442604060020a90910467ffffffffffffffff1611610ee157610ff1565b60028054606060020a80840204600160a060020a031990911617905550565b60018360ff1610156110d857610002565b600060005085604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005091508160010160005082600d0160009054906101000a900460ff1660ff1660028110156100025760060201600050805460f060020a80870204620100000263ffff00001960f860020a8088020460ff19909316929092179190911617815590505050505050565b33828263ffffffff1681548110156100025760009182526020909120018054600160a060020a031916606060020a928302929092049190911790555b83546bffffffff00000000000000001916604060020a60e060020a60018401810204021784555b6040805160c0810182528a815260208082018b81528854610100810463ffffffff168486019081526501000000000090910467ffffffffffffffff1660608501908152436080860190815260a086018e815233600160a060020a0316600090815260048d019096529690942094518554935192519151945163ffffffff1990941660e060020a9182028290041767ffffffff00000000191664010000000093820282900493909302929092176bffffffff00000000000000001916604060020a91830292909204021773ffffffffffffffff0000000000000000000000001916606060020a60c060020a93840284900402177bffffffffffffffff0000000000000000000000000000000000000000191660a060020a918302929092040217815590516001909101555b5050505050505050505050565b8454600187019060ff16600281101561000257600602018054865491955062010000900461ffff16890163ffffffff166d010000000000000000000000000090910467ffffffffffffffff16420311156113735761130d565b8354600185015464010000000090910463ffffffff16604060020a90910467ffffffffffffffff908116919091011642106113ad5761130d565b600160a060020a033316600090815260048501602052604090206001850154815491945067ffffffffffffffff90811660a060020a90920416101561140757835463ffffffff604060020a90910481161061141e5761130d565b825463ffffffff908116908a161161141e5761130d565b6001840154835460058601935067ffffffffffffffff91821660a060020a90910490911610156111e3575082548154604060020a90910463ffffffff169081106111805781805480600101828181548183558181151161149f5760008381526020902061149f9181019083015b808211156114cb576000815560010161148b565b5050506000928352506020909120018054600160a060020a031916606060020a338102041790556111bc565b5090565b60018054606060020a80840204600160a060020a031990911617905550565b600181015442604060020a90910467ffffffffffffffff1611158061151d5750600d82015460ff858116911614155b806115705750805463ffffffff848116606060020a90920416148015906115705750805463ffffffff848116608060020a909204161415806115705750805460a060020a900467ffffffffffffffff1643115b8061159b5750805460ff16431080159061159b5750805467ffffffffffffffff861660ff9091164303115b156115da5734158015906115d05750604051600160a060020a033316903480156108fc02916000818181858888f19350505050155b1561169857610002565b600281018054608060020a6001608060020a03821634018102046001608060020a0319909116179055604080516080810182528581526020810185905290810161169d87335b6040805167ffffffffffffffff8085164082526000198501811640602083015260011985018116408284015260021985018116406060830152600319850181164060808301526004198501164060a0820152606060020a600160a060020a0384160260c082015290519081900360d401902092915050565b610ff1565b81524260209182015233600160a060020a0316600090815293815260409384902082518154928401519584015160609094015160ff1990931660f860020a918202919091041764ffffffff00191661010060e060020a9687029690960495909502949094176cffffffffffffffff000000000019166501000000000060c060020a938402849004021774ffffffffffffffff0000000000000000000000000019166d01000000000000000000000000009183029290920402179091555050505050565b60006000508f604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050908152602001604051809103902060005094508460010160005085600d0160009054906101000a900460ff1660010360ff1660028110156100025760060201600050600d860154909450600186019060ff166002811015610002576006020160005060018101549093504267ffffffffffffffff604060020a909204919091161061181a57610002565b83546000604060020a90910463ffffffff16111561183757610002565b60ff8b16151561184657610002565b60018c60ff16101561185757610002565b85511580611866575060408651115b1561187057610002565b5060009050805b85518160ff1610156118eb57858160ff168151811015610002579060200190602002015163ffffffff16600014806118e1575063ffffffff8216158015906118e157508163ffffffff16868260ff168151811015610002579060200190602002015163ffffffff16115b15611b3457610002565b825463ffffffff8f8116606060020a9092041614611979578d63ffffffff168f604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390207fa2f4a4124ab7224b7753e37c4d34f853613a576f8e812e4f6186a6f1e80d014789604051808260001916815260200191505060405180910390a35b84600d0160009054906101000a900460ff1660010385600d0160006101000a81548160ff021916908360f860020a908102040217905550438460010160006101000a81548167ffffffffffffffff021916908360c060020a90810204021790555060008460000160106101000a81548163ffffffff021916908360e060020a90810204021790555060008460000160146101000a81548167ffffffffffffffff021916908360c060020a9081020402179055508d84600001600c6101000a81548163ffffffff021916908360e060020a9081020402179055508c8460010160106101000a8154816affffffffffffffffffffff021916908375010000000000000000000000000000000000000000009081020402179055508b8460000160006101000a81548160ff021916908360f860020a9081020402179055508584600301600050908051906020019082805482825590600052602060002090600701600890048101928215611b585791602002820160005b83821115611b7b57835183826101000a81548163ffffffff021916908360e060020a9081020402179055509260200192600401602081600301049283019260010302611aed565b858160ff16815181101561000257602090810290910101519150600101611877565b505b50611bab9291505b808211156114cb57805463ffffffff19168155600101611b60565b8015611b565782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611b7b565b50508354600285018054608060020a6001608060020a03821634018102046001608060020a031990911617905560018501805460c060020a42909c018c029b909b04604060020a026fffffffffffffffff000000000000000019909b169a909a1790995550505060e060020a948502949094046401000000000267ffffffff000000001960f060020a97880297909704620100000263ffff00001960f860020a998a02999099046101000261ff00199097169690961797909716949094179490941694909417905550505050505050565b81546001830154600160a060020a038f166000908152600485016020526040902054929d50606060020a90910463ffffffff169950604060020a810467ffffffffffffffff9081169950608060020a82046affffffffffffffffffffff169850908116955060a060020a90910416849010611d1957600160a060020a038c16600090815260048201602052604090205463ffffffff169450611d1e565b600094505b600160a060020a038c1660009081526020839052604090205467ffffffffffffffff6501000000000090910416925050509295985092959850929598565b9b509b509b509b509b509b509b509b509b509b509b509b5091939597999b5091939597999b565b60006000508d604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508c60ff166002811015610002576006020180546001820154919b50640100000000900463ffffffff16604060020a90910467ffffffffffffffff1642031215611e1257610002565b60028a015460006001608060020a039091161115611fde5760038a0180548c51919a50985060ff9081169089161115611e4a578a5197505b60028a01546001608060020a03169650600060ff8916118015611e7757508954600161010090910460ff16115b15611f0a578954610100900460ff166001608060020a03881681156100025760028c015491900497506001608060020a03168790039550600094508493505b8760ff168460ff16101561200057888460ff168154811015610002579060005260206000209060089182820401919006600402905463ffffffff6101009290920a9004169490940193600190930192611eb6565b600254604051600160a060020a03909116906001608060020a03891680156108fc02916000818181858888f193505050501515611fcb5760006000508d604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505090815260200160405180910390206000506001016000508c60010360ff1660028110156100025760060201600050600281018054608060020a6001608060020a0382168b018102046001608060020a031990911617905590505b60028a0180546001608060020a03191690555b89546bffffffff000000000000000019168a5550505050505050505050505050565b600092505b8760ff168360ff161015611f0a578467ffffffffffffffff16898460ff1681548110156100025790600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1687026001608060020a03168115610002570491508a8360ff1681518110156100025760209081029091010151604051600160a060020a03909116906001608060020a03841680156108fc02916000818181858888f1935050505015156120bd57958101955b60019092019161200556", 
  "address": "0x5f742383b6d1298980030d6af943b76cdd902143", 
  "balance": "1<b>.</b>933333333333333535 Ether"
 }, 
 "0xa43ebd8939d8328f5858119a3fb65f65c864c6dd": {
  "name": "Sweeper", 
  "transactions": "35370", 
  "source": "pragma solidity ^0.4.4;\r\n/*\r\n* This is a contract for debloating the state\r\n* @author mhswende\r\n**/\r\ncontract Sweeper\r\n{\r\n    //Solidity implentation\r\n    function sol_clean(uint256 s, uint i){\r\n        uint x = s;\r\n        address b = 0;\r\n        for(uint c=0 ; c < i ; c++){\r\n            x = x+s;\r\n            b = address(x/0x1000000000000000000000000);\r\n            b.send(0);\r\n\r\n        }\r\n    }\r\n    //Asm implementation\r\n    function asm_clean(uint s, uint i)\r\n    {\r\n\r\n        assembly{\r\n            let seed := calldataload(4)//4 if we're using a named function\r\n            let iterations := calldataload(36)\r\n            let target :=seed\r\n        \r\n        loop:\r\n            target := add(target,seed)\r\n            pop(call(0,div(target,0x1000000000000000000000000),0,0,0,0,0))\r\n            iterations := sub(iterations,1) \r\n            jumpi(loop, iterations)\r\n        }\r\n    }\r\n}", 
  "bytecode": "606060405261015c806100126000396000f360606040526000357c01000000000000000000000000000000000000000000000000000000009004806339846a671461004757806353f11cb31461006d57610042565b610002565b346100025761006b6004808035906020019091908035906020019091905050610093565b005b3461000257610091600480803590602001909190803590602001909190505061011e565b005b60006000600084925060009150600090505b8381101561011657848301925082506c010000000000000000000000008381156100025704915081508173ffffffffffffffffffffffffffffffffffffffff166108fc60009081150290604051809050600060405180830381858888f19350505050505b80806001019150506100a5565b5b5050505050565b600435602435815b8281019050600060006000600060006c0100000000000000000000000086046000f15060018203915081610126575050505b505056", 
  "address": "0xa43ebd8939d8328f5858119a3fb65f65c864c6dd", 
  "balance": "0 Ether"
 }, 
 "0xaa1a6e3e6ef20068f7f8d8c835d2d22fd5116444": {
  "name": "ReplaySafeSplit", 
  "transactions": "184842", 
  "source": "contract AmIOnTheFork {\r\n    function forked() constant returns(bool);\r\n}\r\n\r\ncontract ReplaySafeSplit {\r\n    // Fork oracle to use\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\r\n\r\n    // Splits the funds into 2 addresses\r\n    function split(address targetFork, address targetNoFork) returns(bool) {\r\n        if (amIOnTheFork.forked() && targetFork.send(msg.value)) {\r\n            return true;\r\n        } else if (!amIOnTheFork.forked() && targetNoFork.send(msg.value)) {\r\n            return true;\r\n        }\r\n        throw; // don't accept value transfer, otherwise it would be trapped.\r\n    }\r\n\r\n    // Reject value transfers.\r\n    function() {\r\n        throw;\r\n    }\r\n}", 
  "bytecode": "606060405260008054600160a060020a031916732bd2326c993dfaef84f696526064ff22eba5b36217815561015d90819061003990396000f36060604052361561001f5760e060020a60003504630f2c93298114610028575b6100005b610002565b6100c1600435602435600080547f16c72721000000000000000000000000000000000000000000000000000000006060908152600160a060020a03909116906316c727219060649060209060048187876161da5a03f11561000257505060405151905080156100b25750604051600160a060020a038416908290349082818181858883f193505050505b156100d3575060015b92915050565b60408051918252519081900360200190f35b600060009054906101000a9004600160a060020a0316600160a060020a03166316c727216040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750506040515115905080156101505750604051600160a060020a038316908290349082818181858883f193505050505b15610023575060016100bb56", 
  "address": "0xaa1a6e3e6ef20068f7f8d8c835d2d22fd5116444", 
  "balance": "0 Ether"
 }, 
 "0x9554efa1669014c25070bc23c2df262825704228": {
  "name": "ReplaySafeSplit", 
  "transactions": "12952", 
  "source": "contract AmIOnTheFork {\r\n    bool public forked = false;\r\n    address constant darkDAO = 0x304a554a310c7e546dfe434669c62820b7d83490;\r\n    // Check the fork condition during creation of the contract.\r\n    // This function should be called between block 1920000 and 1921200.\r\n    // Approximately between 2016-07-20 12:00:00 UTC and 2016-07-20 17:00:00 UTC.\r\n    // After that the status will be locked in.\r\n    function update() {\r\n        if (block.number >= 1920000 && block.number <= 1921200) {\r\n            forked = darkDAO.balance < 3600000 ether;\r\n        }\r\n    }\r\n    function() {\r\n        throw;\r\n    }\r\n}\r\ncontract ReplaySafeSplit {\r\n    // Fork oracle to use\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\r\n\r\n    // Splits the funds into 2 addresses\r\n    function split(address targetFork, address targetNoFork) returns(bool) {\r\n        if (amIOnTheFork.forked() && targetFork.send(msg.value)) {\r\n            return true;\r\n        } else if (!amIOnTheFork.forked() && targetNoFork.send(msg.value)) {\r\n            return true;\r\n        }\r\n        throw;\r\n    }\r\n\r\n    // Reject value transfers.\r\n    function() {\r\n        throw;\r\n    }\r\n}", 
  "bytecode": "6060604052732bd2326c993dfaef84f696526064ff22eba5b362600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555061023e806100516000396000f36060604052361561003d576000357c0100000000000000000000000000000000000000000000000000000000900480630f2c93291461004a5761003d565b6100485b610002565b565b005b6100696004808035906020019091908035906020019091905050610081565b60405180821515815260200191505060405180910390f35b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316c72721604051817c01000000000000000000000000000000000000000000000000000000000281526004018090506020604051808303816000876161da5a03f1156100025750505060405180519060200150801561014a57508273ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050505b1561015c576001905061023856610233565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316c72721604051817c01000000000000000000000000000000000000000000000000000000000281526004018090506020604051808303816000876161da5a03f115610002575050506040518051906020015015801561022457508173ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050505b156102325760019050610238565b5b610002565b9291505056", 
  "address": "0x9554efa1669014c25070bc23c2df262825704228", 
  "balance": "0 Ether"
 }, 
 "0xe0b7927c4af23765cb51314a0e0521a9645f0e2a": {
  "name": "Token", 
  "transactions": "11524", 
  "source": "/// @title DigixDAO Contract Interfaces\r\n\r\ncontract ConfigInterface {\r\n        address public owner;\r\n        mapping(address => bool) admins;\r\n        mapping(bytes32 => address) addressMap;\r\n        mapping(bytes32 => bool) boolMap;\r\n        mapping(bytes32 => bytes32) bytesMap;\r\n        mapping(bytes32 => uint256) uintMap;\r\n\r\n        /// @notice setConfigAddress sets configuration `_key` to `_val`\r\n        /// @param _key The key name of the configuration.\r\n        /// @param _val The value of the configuration.\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function setConfigAddress(bytes32 _key, address _val) returns(bool success);\r\n\r\n        /// @notice setConfigBool sets configuration `_key` to `_val`\r\n        /// @param _key The key name of the configuration.\r\n        /// @param _val The value of the configuration.\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function setConfigBool(bytes32 _key, bool _val) returns(bool success);\r\n\r\n        /// @notice setConfigBytes sets configuration `_key` to `_val`\r\n        /// @param _key The key name of the configuration.\r\n        /// @param _val The value of the configuration.\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function setConfigBytes(bytes32 _key, bytes32 _val) returns(bool success);\r\n\r\n        /// @notice setConfigUint `_key` to `_val`\r\n        /// @param _key The key name of the configuration.\r\n        /// @param _val The value of the configuration.\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function setConfigUint(bytes32 _key, uint256 _val) returns(bool success);\r\n\r\n        /// @notice getConfigAddress gets configuration `_key`'s value\r\n        /// @param _key The key name of the configuration.\r\n        /// @return The configuration value\r\n        function getConfigAddress(bytes32 _key) returns(address val);\r\n\r\n        /// @notice getConfigBool gets configuration `_key`'s value\r\n        /// @param _key The key name of the configuration.\r\n        /// @return The configuration value\r\n        function getConfigBool(bytes32 _key) returns(bool val);\r\n\r\n        /// @notice getConfigBytes gets configuration `_key`'s value\r\n        /// @param _key The key name of the configuration.\r\n        /// @return The configuration value\r\n        function getConfigBytes(bytes32 _key) returns(bytes32 val);\r\n\r\n        /// @notice getConfigUint gets configuration `_key`'s value\r\n        /// @param _key The key name of the configuration.\r\n        /// @return The configuration value\r\n        function getConfigUint(bytes32 _key) returns(uint256 val);\r\n\r\n        /// @notice addAdmin sets `_admin` as configuration admin\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function addAdmin(address _admin) returns(bool success);\r\n\r\n        /// @notice removeAdmin removes  `_admin`'s rights\r\n        /// @param _admin The key name of the configuration.\r\n        /// @return Whether the configuration setting was successful or not.\r\n        function removeAdmin(address _admin) returns(bool success);\r\n\r\n}\r\n\r\ncontract TokenInterface {\r\n\r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping(address => uint256)) allowed;\r\n        mapping(address => bool) seller;\r\n\r\n        address config;\r\n        address owner;\r\n        address dao;\r\n        address public badgeLedger;\r\n        bool locked;\r\n\r\n        /// @return total amount of tokens\r\n        uint256 public totalSupply;\r\n\r\n        /// @param _owner The address from which the balance will be retrieved\r\n        /// @return The balance\r\n        function balanceOf(address _owner) constant returns(uint256 balance);\r\n\r\n        /// @notice send `_value` tokens to `_to` from `msg.sender`\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of tokens to be transfered\r\n        /// @return Whether the transfer was successful or not\r\n        function transfer(address _to, uint256 _value) returns(bool success);\r\n\r\n        /// @notice send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\r\n        /// @param _from The address of the sender\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of tokens to be transfered\r\n        /// @return Whether the transfer was successful or not\r\n        function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\r\n\r\n        /// @notice `msg.sender` approves `_spender` to spend `_value` tokens on its behalf\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @param _value The amount of tokens to be approved for transfer\r\n        /// @return Whether the approval was successful or not\r\n        function approve(address _spender, uint256 _value) returns(bool success);\r\n\r\n        /// @param _owner The address of the account owning tokens\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @return Amount of remaining tokens of _owner that _spender is allowed to spend\r\n        function allowance(address _owner, address _spender) constant returns(uint256 remaining);\r\n\r\n        /// @notice mint `_amount` of tokens to `_owner`\r\n        /// @param _owner The address of the account receiving the tokens\r\n        /// @param _amount The amount of tokens to mint\r\n        /// @return Whether or not minting was successful\r\n        function mint(address _owner, uint256 _amount) returns(bool success);\r\n\r\n        /// @notice mintBadge Mint `_amount` badges to `_owner`\r\n        /// @param _owner The address of the account receiving the tokens\r\n        /// @param _amount The amount of tokens to mint\r\n        /// @return Whether or not minting was successful\r\n        function mintBadge(address _owner, uint256 _amount) returns(bool success);\r\n\r\n        function registerDao(address _dao) returns(bool success);\r\n\r\n        function registerSeller(address _tokensales) returns(bool success);\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 indexed _value);\r\n        event Mint(address indexed _recipient, uint256 indexed _amount);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 indexed _value);\r\n}\r\n\r\ncontract TokenSalesInterface {\r\n\r\n        struct SaleProxy {\r\n                address payout;\r\n                bool isProxy;\r\n        }\r\n\r\n        struct SaleStatus {\r\n                bool founderClaim;\r\n                uint256 releasedTokens;\r\n                uint256 releasedBadges;\r\n                uint256 claimers;\r\n        }\r\n\r\n        struct Info {\r\n                uint256 totalWei;\r\n                uint256 totalCents;\r\n                uint256 realCents;\r\n                uint256 amount;\r\n        }\r\n\r\n        struct SaleConfig {\r\n                uint256 startDate;\r\n                uint256 periodTwo;\r\n                uint256 periodThree;\r\n                uint256 endDate;\r\n                uint256 goal;\r\n                uint256 cap;\r\n                uint256 badgeCost;\r\n                uint256 founderAmount;\r\n                address founderWallet;\r\n        }\r\n\r\n        struct Buyer {\r\n                uint256 centsTotal;\r\n                uint256 weiTotal;\r\n                bool claimed;\r\n        }\r\n\r\n        Info saleInfo;\r\n        SaleConfig saleConfig;\r\n        SaleStatus saleStatus;\r\n\r\n        address config;\r\n        address owner;\r\n        bool locked;\r\n\r\n        uint256 public ethToCents;\r\n\r\n        mapping(address => Buyer) buyers;\r\n        mapping(address => SaleProxy) proxies;\r\n\r\n        /// @notice Calculates the parts per billion 1\u20441,000,000,000 of `_a` to `_b`\r\n        /// @param _a The antecedent\r\n        /// @param _c The consequent\r\n        /// @return Part per billion value\r\n        function ppb(uint256 _a, uint256 _c) public constant returns(uint256 b);\r\n\r\n\r\n        /// @notice Calculates the share from `_total` based on `_contrib`\r\n        /// @param _contrib The contributed amount in USD\r\n        /// @param _total The total amount raised in USD\r\n        /// @return Total number of shares\r\n        function calcShare(uint256 _contrib, uint256 _total) public constant returns(uint256 share);\r\n\r\n        /// @notice Calculates the current USD cents value of `_wei`\r\n        /// @param _wei the amount of wei\r\n        /// @return The USD cents value\r\n        function weiToCents(uint256 _wei) public constant returns(uint256 centsvalue);\r\n\r\n        function proxyPurchase(address _user) returns(bool success);\r\n\r\n        /// @notice Send msg.value purchase for _user.\r\n        /// @param _user The account to be credited\r\n        /// @return Success if purchase was accepted\r\n        function purchase(address _user, uint256 _amount) private returns(bool success);\r\n\r\n        /// @notice Get crowdsale information for `_user`\r\n        /// @param _user The account to be queried\r\n        /// @return `centstotal` the total amount of USD cents contributed\r\n        /// @return `weitotal` the total amount in wei contributed\r\n        /// @return `share` the current token shares earned\r\n        /// @return `badges` the number of proposer badges earned\r\n        /// @return `claimed` is true if the tokens and badges have been claimed\r\n        function userInfo(address _user) public constant returns(uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed);\r\n\r\n        /// @notice Get the crowdsale information from msg.sender (see userInfo)\r\n        function myInfo() public constant returns(uint256 centstotal, uint256 weitotal, uint256 share, uint badges, bool claimed);\r\n\r\n        /// @notice get the total amount of wei raised for the crowdsale\r\n        /// @return The amount of wei raised\r\n        function totalWei() public constant returns(uint);\r\n\r\n        /// @notice get the total USD value in cents raised for the crowdsale\r\n        /// @return the amount USD cents\r\n        function totalCents() public constant returns(uint);\r\n\r\n        /// @notice get the current crowdsale information\r\n        /// @return `startsale` The unix timestamp for the start of the crowdsale and the first period modifier\r\n        /// @return `two` The unix timestamp for the start of the second period modifier\r\n        /// @return `three` The unix timestamp for the start of the third period modifier\r\n        /// @return `endsale` The unix timestamp of the end of crowdsale\r\n        /// @return `totalwei` The total amount of wei raised\r\n        /// @return `totalcents` The total number of USD cents raised\r\n        /// @return `amount` The amount of DGD tokens available for the crowdsale\r\n        /// @return `goal` The USD value goal for the crowdsale\r\n        /// @return `famount` Founders endowment\r\n        /// @return `faddress` Founder wallet address\r\n        /*function getSaleInfo() public constant returns (uint256 startsale, uint256 two, uint256 three, uint256 endsale, uint256 totalwei, uint256 totalcents, uint256 amount, uint256 goal, uint256 famount, address faddress);*/\r\n\r\n        function claimFor(address _user) returns(bool success);\r\n\r\n        /// @notice Allows msg.sender to claim the DGD tokens and badges if the goal is reached or refunds the ETH contributed if goal is not reached at the end of the crowdsale\r\n        function claim() returns(bool success);\r\n\r\n        function claimFounders() returns(bool success);\r\n\r\n        /// @notice See if the crowdsale goal has been reached\r\n        function goalReached() public constant returns(bool reached);\r\n\r\n        /// @notice Get the current sale period\r\n        /// @return `saleperiod` 0 = Outside of the crowdsale period, 1 = First reward period, 2 = Second reward period, 3 = Final crowdsale period.\r\n        function getPeriod() public constant returns(uint saleperiod);\r\n\r\n        /// @notice Get the date for the start of the crowdsale\r\n        /// @return `date` The unix timestamp for the start\r\n        function startDate() public constant returns(uint date);\r\n\r\n        /// @notice Get the date for the second reward period of the crowdsale\r\n        /// @return `date` The unix timestamp for the second period\r\n        function periodTwo() public constant returns(uint date);\r\n\r\n        /// @notice Get the date for the final period of the crowdsale\r\n        /// @return `date` The unix timestamp for the final period\r\n        function periodThree() public constant returns(uint date);\r\n\r\n        /// @notice Get the date for the end of the crowdsale\r\n        /// @return `date` The unix timestamp for the end of the crowdsale\r\n        function endDate() public constant returns(uint date);\r\n\r\n        /// @notice Check if crowdsale has ended\r\n        /// @return `ended` If the crowdsale has ended\r\n\r\n        function isEnded() public constant returns(bool ended);\r\n\r\n        /// @notice Send raised funds from the crowdsale to the DAO\r\n        /// @return `success` if the send succeeded\r\n        function sendFunds() public returns(bool success);\r\n\r\n        //function regProxy(address _payment, address _payout) returns (bool success);\r\n        function regProxy(address _payout) returns(bool success);\r\n\r\n        function getProxy(address _payout) public returns(address proxy);\r\n\r\n        function getPayout(address _proxy) public returns(address payout, bool isproxy);\r\n\r\n        function unlock() public returns(bool success);\r\n\r\n        function getSaleStatus() public constant returns(bool fclaim, uint256 reltokens, uint256 relbadges, uint256 claimers);\r\n\r\n        function getSaleInfo() public constant returns(uint256 weiamount, uint256 cents, uint256 realcents, uint256 amount);\r\n\r\n        function getSaleConfig() public constant returns(uint256 start, uint256 two, uint256 three, uint256 end, uint256 goal, uint256 cap, uint256 badgecost, uint256 famount, address fwallet);\r\n\r\n        event Purchase(uint256 indexed _exchange, uint256 indexed _rate, uint256 indexed _cents);\r\n        event Claim(address indexed _user, uint256 indexed _amount, uint256 indexed _badges);\r\n\r\n}\r\n\r\ncontract Badge {\r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping(address => uint256)) allowed;\r\n\r\n        address public owner;\r\n        bool public locked;\r\n\r\n        /// @return total amount of tokens\r\n        uint256 public totalSupply;\r\n\r\n        modifier ifOwner() {\r\n                if (msg.sender != owner) {\r\n                        throw;\r\n                } else {\r\n                        _\r\n                }\r\n        }\r\n\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Mint(address indexed _recipient, uint256 indexed _amount);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n        function Badge() {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        function safeToAdd(uint a, uint b) returns(bool) {\r\n                return (a + b >= a);\r\n        }\r\n\r\n        function addSafely(uint a, uint b) returns(uint result) {\r\n                if (!safeToAdd(a, b)) {\r\n                        throw;\r\n                } else {\r\n                        result = a + b;\r\n                        return result;\r\n                }\r\n        }\r\n\r\n        function safeToSubtract(uint a, uint b) returns(bool) {\r\n                return (b <= a);\r\n        }\r\n\r\n        function subtractSafely(uint a, uint b) returns(uint) {\r\n                if (!safeToSubtract(a, b)) throw;\r\n                return a - b;\r\n        }\r\n\r\n        function balanceOf(address _owner) constant returns(uint256 balance) {\r\n                return balances[_owner];\r\n        }\r\n\r\n        function transfer(address _to, uint256 _value) returns(bool success) {\r\n                if (balances[msg.sender] >= _value && _value > 0) {\r\n                        balances[msg.sender] = subtractSafely(balances[msg.sender], _value);\r\n                        balances[_to] = addSafely(_value, balances[_to]);\r\n                        Transfer(msg.sender, _to, _value);\r\n                        success = true;\r\n                } else {\r\n                        success = false;\r\n                }\r\n                return success;\r\n        }\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n                if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n                        balances[_to] = addSafely(balances[_to], _value);\r\n                        balances[_from] = subtractSafely(balances[_from], _value);\r\n                        allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value);\r\n                        Transfer(_from, _to, _value);\r\n                        return true;\r\n                } else {\r\n                        return false;\r\n                }\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value) returns(bool success) {\r\n                allowed[msg.sender][_spender] = _value;\r\n                Approval(msg.sender, _spender, _value);\r\n                success = true;\r\n                return success;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n                remaining = allowed[_owner][_spender];\r\n                return remaining;\r\n        }\r\n\r\n        function mint(address _owner, uint256 _amount) ifOwner returns(bool success) {\r\n                totalSupply = addSafely(totalSupply, _amount);\r\n                balances[_owner] = addSafely(balances[_owner], _amount);\r\n                Mint(_owner, _amount);\r\n                return true;\r\n        }\r\n\r\n        function setOwner(address _owner) ifOwner returns(bool success) {\r\n                owner = _owner;\r\n                return true;\r\n        }\r\n\r\n}\r\n\r\ncontract Token {\r\n\r\n        address public owner;\r\n        address public config;\r\n        bool public locked;\r\n        address public dao;\r\n        address public badgeLedger;\r\n        uint256 public totalSupply;\r\n\r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping(address => uint256)) allowed;\r\n        mapping(address => bool) seller;\r\n\r\n        /// @return total amount of tokens\r\n\r\n        modifier ifSales() {\r\n                if (!seller[msg.sender]) throw;\r\n                _\r\n        }\r\n\r\n        modifier ifOwner() {\r\n                if (msg.sender != owner) throw;\r\n                _\r\n        }\r\n\r\n        modifier ifDao() {\r\n                if (msg.sender != dao) throw;\r\n                _\r\n        }\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Mint(address indexed _recipient, uint256 _amount);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n        function Token(address _config) {\r\n                config = _config;\r\n                owner = msg.sender;\r\n                address _initseller = ConfigInterface(_config).getConfigAddress(\"sale1:address\");\r\n                seller[_initseller] = true;\r\n                badgeLedger = new Badge();\r\n                locked = false;\r\n        }\r\n\r\n        function safeToAdd(uint a, uint b) returns(bool) {\r\n                return (a + b >= a);\r\n        }\r\n\r\n        function addSafely(uint a, uint b) returns(uint result) {\r\n                if (!safeToAdd(a, b)) {\r\n                        throw;\r\n                } else {\r\n                        result = a + b;\r\n                        return result;\r\n                }\r\n        }\r\n\r\n        function safeToSubtract(uint a, uint b) returns(bool) {\r\n                return (b <= a);\r\n        }\r\n\r\n        function subtractSafely(uint a, uint b) returns(uint) {\r\n                if (!safeToSubtract(a, b)) throw;\r\n                return a - b;\r\n        }\r\n\r\n        function balanceOf(address _owner) constant returns(uint256 balance) {\r\n                return balances[_owner];\r\n        }\r\n\r\n        function transfer(address _to, uint256 _value) returns(bool success) {\r\n                if (balances[msg.sender] >= _value && _value > 0) {\r\n                        balances[msg.sender] = subtractSafely(balances[msg.sender], _value);\r\n                        balances[_to] = addSafely(balances[_to], _value);\r\n                        Transfer(msg.sender, _to, _value);\r\n                        success = true;\r\n                } else {\r\n                        success = false;\r\n                }\r\n                return success;\r\n        }\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n                if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n                        balances[_to] = addSafely(balances[_to], _value);\r\n                        balances[_from] = subtractSafely(balances[_from], _value);\r\n                        allowed[_from][msg.sender] = subtractSafely(allowed[_from][msg.sender], _value);\r\n                        Transfer(_from, _to, _value);\r\n                        return true;\r\n                } else {\r\n                        return false;\r\n                }\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value) returns(bool success) {\r\n                allowed[msg.sender][_spender] = _value;\r\n                Approval(msg.sender, _spender, _value);\r\n                success = true;\r\n                return success;\r\n        }\r\n\r\n        function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n                remaining = allowed[_owner][_spender];\r\n                return remaining;\r\n        }\r\n\r\n        function mint(address _owner, uint256 _amount) ifSales returns(bool success) {\r\n                totalSupply = addSafely(_amount, totalSupply);\r\n                balances[_owner] = addSafely(balances[_owner], _amount);\r\n                return true;\r\n        }\r\n\r\n        function mintBadge(address _owner, uint256 _amount) ifSales returns(bool success) {\r\n                if (!Badge(badgeLedger).mint(_owner, _amount)) return false;\r\n                return true;\r\n        }\r\n\r\n        function registerDao(address _dao) ifOwner returns(bool success) {\r\n                if (locked == true) return false;\r\n                dao = _dao;\r\n                locked = true;\r\n                return true;\r\n        }\r\n\r\n        function setDao(address _newdao) ifDao returns(bool success) {\r\n                dao = _newdao;\r\n                return true;\r\n        }\r\n\r\n        function isSeller(address _query) returns(bool isseller) {\r\n                return seller[_query];\r\n        }\r\n\r\n        function registerSeller(address _tokensales) ifDao returns(bool success) {\r\n                seller[_tokensales] = true;\r\n                return true;\r\n        }\r\n\r\n        function unregisterSeller(address _tokensales) ifDao returns(bool success) {\r\n                seller[_tokensales] = false;\r\n                return true;\r\n        }\r\n\r\n        function setOwner(address _newowner) ifDao returns(bool success) {\r\n                if (Badge(badgeLedger).setOwner(_newowner)) {\r\n                        owner = _newowner;\r\n                        success = true;\r\n                } else {\r\n                        success = false;\r\n                }\r\n                return success;\r\n        }\r\n\r\n}", 
  "bytecode": "", 
  "address": "0xe0b7927c4af23765cb51314a0e0521a9645f0e2a", 
  "balance": "3<b>.</b>112250000000000002 Ether"
 }, 
 "0xbb9bc244d798123fde783fcc1c72d3bb8c189413": {
  "name": "DAO", 
  "transactions": "168208", 
  "source": "/*\n\n- Bytecode Verification performed was compared on second iteration -\n\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic, standardized Token contract with no \"premine\". Defines the functions to\ncheck token balances, send tokens, send tokens on behalf of a 3rd party and the\ncorresponding approval process. Tokens need to be created by a derived\ncontract (e.g. TokenCreation.sol).\n\nThank you ConsenSys, this contract originated from:\nhttps://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Standard_Token.sol\nWhich is itself based on the Ethereum standardized contract APIs:\nhttps://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\n*/\n\n/// @title Standard Token Contract.\n\ncontract TokenInterface {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /// Total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`\n    /// @param _from The address of the origin of the transfer\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    /// its behalf\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _amount) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    /// to spend\n    function allowance(\n        address _owner,\n        address _spender\n    ) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n    );\n}\n\n\ncontract Token is TokenInterface {\n    // Protects users by preventing the execution of method calls that\n    // inadvertently also transferred ether\n    modifier noEther() {if (msg.value > 0) throw; _}\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) noEther returns (bool success) {\n        if (balances[msg.sender] >= _amount && _amount > 0) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n           return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) noEther returns (bool success) {\n\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0) {\n\n            balances[_to] += _amount;\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic account, used by the DAO contract to separately manage both the rewards \nand the extraBalance accounts. \n*/\n\ncontract ManagedAccountInterface {\n    // The only address with permission to withdraw from this account\n    address public owner;\n    // If true, only the owner of the account can receive ether from it\n    bool public payOwnerOnly;\n    // The sum of ether (in wei) which has been sent to this contract\n    uint public accumulatedInput;\n\n    /// @notice Sends `_amount` of wei to _recipient\n    /// @param _amount The amount of wei to send to `_recipient`\n    /// @param _recipient The address to receive `_amount` of wei\n    /// @return True if the send completed\n    function payOut(address _recipient, uint _amount) returns (bool);\n\n    event PayOut(address indexed _recipient, uint _amount);\n}\n\n\ncontract ManagedAccount is ManagedAccountInterface{\n\n    // The constructor sets the owner of the account\n    function ManagedAccount(address _owner, bool _payOwnerOnly) {\n        owner = _owner;\n        payOwnerOnly = _payOwnerOnly;\n    }\n\n    // When the contract receives a transaction without data this is called. \n    // It counts the amount of ether it receives and stores it in \n    // accumulatedInput.\n    function() {\n        accumulatedInput += msg.value;\n    }\n\n    function payOut(address _recipient, uint _amount) returns (bool) {\n        if (msg.sender != owner || msg.value > 0 || (payOwnerOnly && _recipient != owner))\n            throw;\n        if (_recipient.call.value(_amount)()) {\n            PayOut(_recipient, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\n * Token Creation contract, used by the DAO to create its tokens and initialize\n * its ether. Feel free to modify the divisor method to implement different\n * Token Creation parameters\n*/\n\n\ncontract TokenCreationInterface {\n\n    // End of token creation, in Unix time\n    uint public closingTime;\n    // Minimum fueling goal of the token creation, denominated in tokens to\n    // be created\n    uint public minTokensToCreate;\n    // True if the DAO reached its minimum fueling goal, false otherwise\n    bool public isFueled;\n    // For DAO splits - if privateCreation is 0, then it is a public token\n    // creation, otherwise only the address stored in privateCreation is\n    // allowed to create tokens\n    address public privateCreation;\n    // hold extra ether which has been sent after the DAO token\n    // creation rate has increased\n    ManagedAccount public extraBalance;\n    // tracks the amount of wei given from each contributor (used for refund)\n    mapping (address => uint256) weiGiven;\n\n    /// @dev Constructor setting the minimum fueling goal and the\n    /// end of the Token Creation\n    /// @param _minTokensToCreate Minimum fueling goal in number of\n    ///        Tokens to be created\n    /// @param _closingTime Date (in Unix time) of the end of the Token Creation\n    /// @param _privateCreation Zero means that the creation is public.  A\n    /// non-zero address represents the only address that can create Tokens\n    /// (the address can also create Tokens on behalf of other accounts)\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function TokenCreation(\n        //  uint _minTokensTocreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `_tokenHolder` as the initial owner of the Token\n    /// @param _tokenHolder The address of the Tokens's recipient\n    /// @return Whether the token creation was successful\n    function createTokenProxy(address _tokenHolder) returns (bool success);\n\n    /// @notice Refund `msg.sender` in the case the Token Creation did\n    /// not reach its minimum fueling goal\n    function refund();\n\n    /// @return The divisor used to calculate the token creation rate during\n    /// the creation phase\n    function divisor() constant returns (uint divisor);\n\n    event FuelingToDate(uint value);\n    event CreatedToken(address indexed to, uint amount);\n    event Refund(address indexed to, uint value);\n}\n\n\ncontract TokenCreation is TokenCreationInterface, Token {\n    function TokenCreation(\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation) {\n\n        closingTime = _closingTime;\n        minTokensToCreate = _minTokensToCreate;\n        privateCreation = _privateCreation;\n        extraBalance = new ManagedAccount(address(this), true);\n    }\n\n    function createTokenProxy(address _tokenHolder) returns (bool success) {\n        if (now < closingTime && msg.value > 0\n            && (privateCreation == 0 || privateCreation == msg.sender)) {\n\n            uint token = (msg.value * 20) / divisor();\n            extraBalance.call.value(msg.value - token)();\n            balances[_tokenHolder] += token;\n            totalSupply += token;\n            weiGiven[_tokenHolder] += msg.value;\n            CreatedToken(_tokenHolder, token);\n            if (totalSupply >= minTokensToCreate && !isFueled) {\n                isFueled = true;\n                FuelingToDate(totalSupply);\n            }\n            return true;\n        }\n        throw;\n    }\n\n    function refund() noEther {\n        if (now > closingTime && !isFueled) {\n            // Get extraBalance - will only succeed when called for the first time\n            if (extraBalance.balance >= extraBalance.accumulatedInput())\n                extraBalance.payOut(address(this), extraBalance.accumulatedInput());\n\n            // Execute refund\n            if (msg.sender.call.value(weiGiven[msg.sender])()) {\n                Refund(msg.sender, weiGiven[msg.sender]);\n                totalSupply -= balances[msg.sender];\n                balances[msg.sender] = 0;\n                weiGiven[msg.sender] = 0;\n            }\n        }\n    }\n\n    function divisor() constant returns (uint divisor) {\n        // The number of (base unit) tokens per wei is calculated\n        // as `msg.value` * 20 / `divisor`\n        // The fueling period starts with a 1:1 ratio\n        if (closingTime - 2 weeks > now) {\n            return 20;\n        // Followed by 10 days with a daily creation rate increase of 5%\n        } else if (closingTime - 4 days > now) {\n            return (20 + (now - (closingTime - 2 weeks)) / (1 days));\n        // The last 4 days there is a constant creation rate ratio of 1:1.5\n        } else {\n            return 30;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nStandard smart contract for a Decentralized Autonomous Organization (DAO)\nto automate organizational governance and decision-making.\n*/\n\n\ncontract DAOInterface {\n\n    // The amount of days for which people who try to participate in the\n    // creation by calling the fallback function will still get their ether back\n    uint constant creationGracePeriod = 40 days;\n    // The minimum debate period that a generic proposal can have\n    uint constant minProposalDebatePeriod = 2 weeks;\n    // The minimum debate period that a split proposal can have\n    uint constant minSplitDebatePeriod = 1 weeks;\n    // Period of days inside which it's possible to execute a DAO split\n    uint constant splitExecutionPeriod = 27 days;\n    // Period of time after which the minimum Quorum is halved\n    uint constant quorumHalvingPeriod = 25 weeks;\n    // Period after which a proposal is closed\n    // (used in the case `executeProposal` fails because it throws)\n    uint constant executeProposalPeriod = 10 days;\n    // Denotes the maximum proposal deposit that can be given. It is given as\n    // a fraction of total Ether spent plus balance of the DAO\n    uint constant maxDepositDivisor = 100;\n\n    // Proposals to spend the DAO's ether or to choose a new Curator\n    Proposal[] public proposals;\n    // The quorum needed for each proposal is partially calculated by\n    // totalSupply / minQuorumDivisor\n    uint public minQuorumDivisor;\n    // The unix time of the last time quorum was reached on a proposal\n    uint  public lastTimeMinQuorumMet;\n\n    // Address of the curator\n    address public curator;\n    // The whitelist: List of addresses the DAO is allowed to send ether to\n    mapping (address => bool) public allowedRecipients;\n\n    // Tracks the addresses that own Reward Tokens. Those addresses can only be\n    // DAOs that have split from the original DAO. Conceptually, Reward Tokens\n    // represent the proportion of the rewards that the DAO has the right to\n    // receive. These Reward Tokens are generated when the DAO spends ether.\n    mapping (address => uint) public rewardToken;\n    // Total supply of rewardToken\n    uint public totalRewardToken;\n\n    // The account used to manage the rewards which are to be distributed to the\n    // DAO Token Holders of this DAO\n    ManagedAccount public rewardAccount;\n\n    // The account used to manage the rewards which are to be distributed to\n    // any DAO that holds Reward Tokens\n    ManagedAccount public DAOrewardAccount;\n\n    // Amount of rewards (in wei) already paid out to a certain DAO\n    mapping (address => uint) public DAOpaidOut;\n\n    // Amount of rewards (in wei) already paid out to a certain address\n    mapping (address => uint) public paidOut;\n    // Map of addresses blocked during a vote (not allowed to transfer DAO\n    // tokens). The address points to the proposal ID.\n    mapping (address => uint) public blocked;\n\n    // The minimum deposit (in wei) required to submit any proposal that is not\n    // requesting a new Curator (no deposit is required for splits)\n    uint public proposalDeposit;\n\n    // the accumulated sum of all current proposal deposits\n    uint sumOfProposalDeposits;\n\n    // Contract that is able to create a new DAO (with the same code as\n    // this one), used for splits\n    DAO_Creator public daoCreator;\n\n    // A proposal with `newCurator == false` represents a transaction\n    // to be issued by this DAO\n    // A proposal with `newCurator == true` represents a DAO split\n    struct Proposal {\n        // The address where the `amount` will go to if the proposal is accepted\n        // or if `newCurator` is true, the proposed Curator of\n        // the new DAO).\n        address recipient;\n        // The amount to transfer to `recipient` if the proposal is accepted.\n        uint amount;\n        // A plain text description of the proposal\n        string description;\n        // A unix timestamp, denoting the end of the voting period\n        uint votingDeadline;\n        // True if the proposal's votes have yet to be counted, otherwise False\n        bool open;\n        // True if quorum has been reached, the votes have been counted, and\n        // the majority said yes\n        bool proposalPassed;\n        // A hash to check validity of a proposal\n        bytes32 proposalHash;\n        // Deposit in wei the creator added when submitting their proposal. It\n        // is taken from the msg.value of a newProposal call.\n        uint proposalDeposit;\n        // True if this proposal is to assign a new Curator\n        bool newCurator;\n        // Data needed for splitting the DAO\n        SplitData[] splitData;\n        // Number of Tokens in favor of the proposal\n        uint yea;\n        // Number of Tokens opposed to the proposal\n        uint nay;\n        // Simple mapping to check if a shareholder has voted for it\n        mapping (address => bool) votedYes;\n        // Simple mapping to check if a shareholder has voted against it\n        mapping (address => bool) votedNo;\n        // Address of the shareholder who created the proposal\n        address creator;\n    }\n\n    // Used only in the case of a newCurator proposal.\n    struct SplitData {\n        // The balance of the current DAO minus the deposit at the time of split\n        uint splitBalance;\n        // The total amount of DAO Tokens in existence at the time of split.\n        uint totalSupply;\n        // Amount of Reward Tokens owned by the DAO at the time of split.\n        uint rewardToken;\n        // The new DAO contract created at the time of split.\n        DAO newDAO;\n    }\n\n    // Used to restrict access to certain functions to only DAO Token Holders\n    modifier onlyTokenholders {}\n\n    /// @dev Constructor setting the Curator and the address\n    /// for the contract able to create another DAO as well as the parameters\n    /// for the DAO Token Creation\n    /// @param _curator The Curator\n    /// @param _daoCreator The contract able to (re)create this DAO\n    /// @param _proposalDeposit The deposit to be paid for a regular proposal\n    /// @param _minTokensToCreate Minimum required wei-equivalent tokens\n    ///        to be created for a successful DAO Token Creation\n    /// @param _closingTime Date (in Unix time) of the end of the DAO Token Creation\n    /// @param _privateCreation If zero the DAO Token Creation is open to public, a\n    /// non-zero address means that the DAO Token Creation is only for the address\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function DAO(\n        //  address _curator,\n        //  DAO_Creator _daoCreator,\n        //  uint _proposalDeposit,\n        //  uint _minTokensToCreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `msg.sender` as the beneficiary\n    /// @return Whether the token creation was successful\n    function () returns (bool success);\n\n\n    /// @dev This function is used to send ether back\n    /// to the DAO, it can also be used to receive payments that should not be\n    /// counted as rewards (donations, grants, etc.)\n    /// @return Whether the DAO received the ether successfully\n    function receiveEther() returns(bool);\n\n    /// @notice `msg.sender` creates a proposal to send `_amount` Wei to\n    /// `_recipient` with the transaction data `_transactionData`. If\n    /// `_newCurator` is true, then this is a proposal that splits the\n    /// DAO and sets `_recipient` as the new DAO's Curator.\n    /// @param _recipient Address of the recipient of the proposed transaction\n    /// @param _amount Amount of wei to be sent with the proposed transaction\n    /// @param _description String describing the proposal\n    /// @param _transactionData Data of the proposed transaction\n    /// @param _debatingPeriod Time used for debating a proposal, at least 2\n    /// weeks for a regular proposal, 10 days for new Curator proposal\n    /// @param _newCurator Bool defining whether this proposal is about\n    /// a new Curator or not\n    /// @return The proposal ID. Needed for voting on the proposal\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID);\n\n    /// @notice Check that the proposal with the ID `_proposalID` matches the\n    /// transaction which sends `_amount` with data `_transactionData`\n    /// to `_recipient`\n    /// @param _proposalID The proposal ID\n    /// @param _recipient The recipient of the proposed transaction\n    /// @param _amount The amount of wei to be sent in the proposed transaction\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposal ID matches the transaction data or not\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) constant returns (bool _codeChecksOut);\n\n    /// @notice Vote on proposal `_proposalID` with `_supportsProposal`\n    /// @param _proposalID The proposal ID\n    /// @param _supportsProposal Yes/No - support of the proposal\n    /// @return The vote ID.\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders returns (uint _voteID);\n\n    /// @notice Checks whether proposal `_proposalID` with transaction data\n    /// `_transactionData` has been voted for or rejected, and executes the\n    /// transaction in the case it has been voted for.\n    /// @param _proposalID The proposal ID\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposed transaction has been executed or not\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) returns (bool _success);\n\n    /// @notice ATTENTION! I confirm to move my remaining ether to a new DAO\n    /// with `_newCurator` as the new Curator, as has been\n    /// proposed in proposal `_proposalID`. This will burn my tokens. This can\n    /// not be undone and will split the DAO into two DAO's, with two\n    /// different underlying tokens.\n    /// @param _proposalID The proposal ID\n    /// @param _newCurator The new Curator of the new DAO\n    /// @dev This function, when called for the first time for this proposal,\n    /// will create a new DAO and send the sender's portion of the remaining\n    /// ether and Reward Tokens to the new DAO. It will also burn the DAO Tokens\n    /// of the sender.\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) returns (bool _success);\n\n    /// @dev can only be called by the DAO itself through a proposal\n    /// updates the contract of the DAO by sending all ether and rewardTokens\n    /// to the new DAO. The new DAO needs to be approved by the Curator\n    /// @param _newContract the address of the new contract\n    function newContract(address _newContract);\n\n\n    /// @notice Add a new possible recipient `_recipient` to the whitelist so\n    /// that the DAO can send transactions to them (using proposals)\n    /// @param _recipient New recipient address\n    /// @dev Can only be called by the current Curator\n    /// @return Whether successful or not\n    function changeAllowedRecipients(address _recipient, bool _allowed) external returns (bool _success);\n\n\n    /// @notice Change the minimum deposit required to submit a proposal\n    /// @param _proposalDeposit The new proposal deposit\n    /// @dev Can only be called by this DAO (through proposals with the\n    /// recipient being this DAO itself)\n    function changeProposalDeposit(uint _proposalDeposit) external;\n\n    /// @notice Move rewards from the DAORewards managed account\n    /// @param _toMembers If true rewards are moved to the actual reward account\n    ///                   for the DAO. If not then it's moved to the DAO itself\n    /// @return Whether the call was successful\n    function retrieveDAOReward(bool _toMembers) external returns (bool _success);\n\n    /// @notice Get my portion of the reward that was sent to `rewardAccount`\n    /// @return Whether the call was successful\n    function getMyReward() returns(bool _success);\n\n    /// @notice Withdraw `_account`'s portion of the reward from `rewardAccount`\n    /// to `_account`'s balance\n    /// @return Whether the call was successful\n    function withdrawRewardFor(address _account) internal returns (bool _success);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`. Prior to this\n    /// getMyReward() is called.\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferWithoutReward(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`. Prior to this getMyReward() is called.\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success);\n\n    /// @notice Doubles the 'minQuorumDivisor' in the case quorum has not been\n    /// achieved in 52 weeks\n    /// @return Whether the change was successful or not\n    function halveMinQuorum() returns (bool _success);\n\n    /// @return total number of proposals ever created\n    function numberOfProposals() constant returns (uint _numberOfProposals);\n\n    /// @param _proposalID Id of the new curator proposal\n    /// @return Address of the new DAO\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO);\n\n    /// @param _account The address of the account which is checked.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function isBlocked(address _account) internal returns (bool);\n\n    /// @notice If the caller is blocked by a proposal whose voting deadline\n    /// has exprired then unblock him.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function unblockMe() returns (bool);\n\n    event ProposalAdded(\n        uint indexed proposalID,\n        address recipient,\n        uint amount,\n        bool newCurator,\n        string description\n    );\n    event Voted(uint indexed proposalID, bool position, address indexed voter);\n    event ProposalTallied(uint indexed proposalID, bool result, uint quorum);\n    event NewCurator(address indexed _newCurator);\n    event AllowedRecipientChanged(address indexed _recipient, bool _allowed);\n}\n\n// The DAO contract itself\ncontract DAO is DAOInterface, Token, TokenCreation {\n\n    // Modifier that allows only shareholders to vote and create new proposals\n    modifier onlyTokenholders {\n        if (balanceOf(msg.sender) == 0) throw;\n            _\n    }\n\n    function DAO(\n        address _curator,\n        DAO_Creator _daoCreator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation\n    ) TokenCreation(_minTokensToCreate, _closingTime, _privateCreation) {\n\n        curator = _curator;\n        daoCreator = _daoCreator;\n        proposalDeposit = _proposalDeposit;\n        rewardAccount = new ManagedAccount(address(this), false);\n        DAOrewardAccount = new ManagedAccount(address(this), false);\n        if (address(rewardAccount) == 0)\n            throw;\n        if (address(DAOrewardAccount) == 0)\n            throw;\n        lastTimeMinQuorumMet = now;\n        minQuorumDivisor = 5; // sets the minimal quorum to 20%\n        proposals.length = 1; // avoids a proposal with ID 0 because it is used\n\n        allowedRecipients[address(this)] = true;\n        allowedRecipients[curator] = true;\n    }\n\n    function () returns (bool success) {\n        if (now < closingTime + creationGracePeriod && msg.sender != address(extraBalance))\n            return createTokenProxy(msg.sender);\n        else\n            return receiveEther();\n    }\n\n\n    function receiveEther() returns (bool) {\n        return true;\n    }\n\n\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID) {\n\n        // Sanity check\n        if (_newCurator && (\n            _amount != 0\n            || _transactionData.length != 0\n            || _recipient == curator\n            || msg.value > 0\n            || _debatingPeriod < minSplitDebatePeriod)) {\n            throw;\n        } else if (\n            !_newCurator\n            && (!isRecipientAllowed(_recipient) || (_debatingPeriod <  minProposalDebatePeriod))\n        ) {\n            throw;\n        }\n\n        if (_debatingPeriod > 8 weeks)\n            throw;\n\n        if (!isFueled\n            || now < closingTime\n            || (msg.value < proposalDeposit && !_newCurator)) {\n\n            throw;\n        }\n\n        if (now + _debatingPeriod < now) // prevents overflow\n            throw;\n\n        // to prevent a 51% attacker to convert the ether into deposit\n        if (msg.sender == address(this))\n            throw;\n\n        _proposalID = proposals.length++;\n        Proposal p = proposals[_proposalID];\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.description = _description;\n        p.proposalHash = sha3(_recipient, _amount, _transactionData);\n        p.votingDeadline = now + _debatingPeriod;\n        p.open = true;\n        //p.proposalPassed = False; // that's default\n        p.newCurator = _newCurator;\n        if (_newCurator)\n            p.splitData.length++;\n        p.creator = msg.sender;\n        p.proposalDeposit = msg.value;\n\n        sumOfProposalDeposits += msg.value;\n\n        ProposalAdded(\n            _proposalID,\n            _recipient,\n            _amount,\n            _newCurator,\n            _description\n        );\n    }\n\n\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) noEther constant returns (bool _codeChecksOut) {\n        Proposal p = proposals[_proposalID];\n        return p.proposalHash == sha3(_recipient, _amount, _transactionData);\n    }\n\n\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders noEther returns (uint _voteID) {\n\n        Proposal p = proposals[_proposalID];\n        if (p.votedYes[msg.sender]\n            || p.votedNo[msg.sender]\n            || now >= p.votingDeadline) {\n\n            throw;\n        }\n\n        if (_supportsProposal) {\n            p.yea += balances[msg.sender];\n            p.votedYes[msg.sender] = true;\n        } else {\n            p.nay += balances[msg.sender];\n            p.votedNo[msg.sender] = true;\n        }\n\n        if (blocked[msg.sender] == 0) {\n            blocked[msg.sender] = _proposalID;\n        } else if (p.votingDeadline > proposals[blocked[msg.sender]].votingDeadline) {\n            // this proposal's voting deadline is further into the future than\n            // the proposal that blocks the sender so make it the blocker\n            blocked[msg.sender] = _proposalID;\n        }\n\n        Voted(_proposalID, _supportsProposal, msg.sender);\n    }\n\n\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) noEther returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        uint waitPeriod = p.newCurator\n            ? splitExecutionPeriod\n            : executeProposalPeriod;\n        // If we are over deadline and waiting period, assert proposal is closed\n        if (p.open && now > p.votingDeadline + waitPeriod) {\n            closeProposal(_proposalID);\n            return;\n        }\n\n        // Check if the proposal can be executed\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            // Have the votes been counted?\n            || !p.open\n            // Does the transaction code match the proposal?\n            || p.proposalHash != sha3(p.recipient, p.amount, _transactionData)) {\n\n            throw;\n        }\n\n        // If the curator removed the recipient from the whitelist, close the proposal\n        // in order to free the deposit and allow unblocking of voters\n        if (!isRecipientAllowed(p.recipient)) {\n            closeProposal(_proposalID);\n            p.creator.send(p.proposalDeposit);\n            return;\n        }\n\n        bool proposalCheck = true;\n\n        if (p.amount > actualBalance())\n            proposalCheck = false;\n\n        uint quorum = p.yea + p.nay;\n\n        // require 53% for calling newContract()\n        if (_transactionData.length >= 4 && _transactionData[0] == 0x68\n            && _transactionData[1] == 0x37 && _transactionData[2] == 0xff\n            && _transactionData[3] == 0x1e\n            && quorum < minQuorum(actualBalance() + rewardToken[address(this)])) {\n\n                proposalCheck = false;\n        }\n\n        if (quorum >= minQuorum(p.amount)) {\n            if (!p.creator.send(p.proposalDeposit))\n                throw;\n\n            lastTimeMinQuorumMet = now;\n            // set the minQuorum to 20% again, in the case it has been reached\n            if (quorum > totalSupply / 5)\n                minQuorumDivisor = 5;\n        }\n\n        // Execute result\n        if (quorum >= minQuorum(p.amount) && p.yea > p.nay && proposalCheck) {\n            if (!p.recipient.call.value(p.amount)(_transactionData))\n                throw;\n\n            p.proposalPassed = true;\n            _success = true;\n\n            // only create reward tokens when ether is not sent to the DAO itself and\n            // related addresses. Proxy addresses should be forbidden by the curator.\n            if (p.recipient != address(this) && p.recipient != address(rewardAccount)\n                && p.recipient != address(DAOrewardAccount)\n                && p.recipient != address(extraBalance)\n                && p.recipient != address(curator)) {\n\n                rewardToken[address(this)] += p.amount;\n                totalRewardToken += p.amount;\n            }\n        }\n\n        closeProposal(_proposalID);\n\n        // Initiate event\n        ProposalTallied(_proposalID, _success, quorum);\n    }\n\n\n    function closeProposal(uint _proposalID) internal {\n        Proposal p = proposals[_proposalID];\n        if (p.open)\n            sumOfProposalDeposits -= p.proposalDeposit;\n        p.open = false;\n    }\n\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) noEther onlyTokenholders returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        // Sanity check\n\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            //The request for a split expires XX days after the voting deadline\n            || now > p.votingDeadline + splitExecutionPeriod\n            // Does the new Curator address match?\n            || p.recipient != _newCurator\n            // Is it a new curator proposal?\n            || !p.newCurator\n            // Have you voted for this split?\n            || !p.votedYes[msg.sender]\n            // Did you already vote on another proposal?\n            || (blocked[msg.sender] != _proposalID && blocked[msg.sender] != 0) )  {\n\n            throw;\n        }\n\n        // If the new DAO doesn't exist yet, create the new DAO and store the\n        // current split data\n        if (address(p.splitData[0].newDAO) == 0) {\n            p.splitData[0].newDAO = createNewDAO(_newCurator);\n            // Call depth limit reached, etc.\n            if (address(p.splitData[0].newDAO) == 0)\n                throw;\n            // should never happen\n            if (this.balance < sumOfProposalDeposits)\n                throw;\n            p.splitData[0].splitBalance = actualBalance();\n            p.splitData[0].rewardToken = rewardToken[address(this)];\n            p.splitData[0].totalSupply = totalSupply;\n            p.proposalPassed = true;\n        }\n\n        // Move ether and assign new Tokens\n        uint fundsToBeMoved =\n            (balances[msg.sender] * p.splitData[0].splitBalance) /\n            p.splitData[0].totalSupply;\n        if (p.splitData[0].newDAO.createTokenProxy.value(fundsToBeMoved)(msg.sender) == false)\n            throw;\n\n\n        // Assign reward rights to new DAO\n        uint rewardTokenToBeMoved =\n            (balances[msg.sender] * p.splitData[0].rewardToken) /\n            p.splitData[0].totalSupply;\n\n        uint paidOutToBeMoved = DAOpaidOut[address(this)] * rewardTokenToBeMoved /\n            rewardToken[address(this)];\n\n        rewardToken[address(p.splitData[0].newDAO)] += rewardTokenToBeMoved;\n        if (rewardToken[address(this)] < rewardTokenToBeMoved)\n            throw;\n        rewardToken[address(this)] -= rewardTokenToBeMoved;\n\n        DAOpaidOut[address(p.splitData[0].newDAO)] += paidOutToBeMoved;\n        if (DAOpaidOut[address(this)] < paidOutToBeMoved)\n            throw;\n        DAOpaidOut[address(this)] -= paidOutToBeMoved;\n\n        // Burn DAO Tokens\n        Transfer(msg.sender, 0, balances[msg.sender]);\n        withdrawRewardFor(msg.sender); // be nice, and get his rewards\n        totalSupply -= balances[msg.sender];\n        balances[msg.sender] = 0;\n        paidOut[msg.sender] = 0;\n        return true;\n    }\n\n    function newContract(address _newContract){\n        if (msg.sender != address(this) || !allowedRecipients[_newContract]) return;\n        // move all ether\n        if (!_newContract.call.value(address(this).balance)()) {\n            throw;\n        }\n\n        //move all reward tokens\n        rewardToken[_newContract] += rewardToken[address(this)];\n        rewardToken[address(this)] = 0;\n        DAOpaidOut[_newContract] += DAOpaidOut[address(this)];\n        DAOpaidOut[address(this)] = 0;\n    }\n\n\n    function retrieveDAOReward(bool _toMembers) external noEther returns (bool _success) {\n        DAO dao = DAO(msg.sender);\n\n        if ((rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken < DAOpaidOut[msg.sender])\n            throw;\n\n        uint reward =\n            (rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken - DAOpaidOut[msg.sender];\n        if(_toMembers) {\n            if (!DAOrewardAccount.payOut(dao.rewardAccount(), reward))\n                throw;\n            }\n        else {\n            if (!DAOrewardAccount.payOut(dao, reward))\n                throw;\n        }\n        DAOpaidOut[msg.sender] += reward;\n        return true;\n    }\n\n    function getMyReward() noEther returns (bool _success) {\n        return withdrawRewardFor(msg.sender);\n    }\n\n\n    function withdrawRewardFor(address _account) noEther internal returns (bool _success) {\n        if ((balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply < paidOut[_account])\n            throw;\n\n        uint reward =\n            (balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply - paidOut[_account];\n        if (!rewardAccount.payOut(_account, reward))\n            throw;\n        paidOut[_account] += reward;\n        return true;\n    }\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(msg.sender)\n            && transferPaidOut(msg.sender, _to, _value)\n            && super.transfer(_to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferWithoutReward(address _to, uint256 _value) returns (bool success) {\n        if (!getMyReward())\n            throw;\n        return transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(_from)\n            && transferPaidOut(_from, _to, _value)\n            && super.transferFrom(_from, _to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _value\n    ) returns (bool success) {\n\n        if (!withdrawRewardFor(_from))\n            throw;\n        return transferFrom(_from, _to, _value);\n    }\n\n\n    function transferPaidOut(\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal returns (bool success) {\n\n        uint transferPaidOut = paidOut[_from] * _value / balanceOf(_from);\n        if (transferPaidOut > paidOut[_from])\n            throw;\n        paidOut[_from] -= transferPaidOut;\n        paidOut[_to] += transferPaidOut;\n        return true;\n    }\n\n\n    function changeProposalDeposit(uint _proposalDeposit) noEther external {\n        if (msg.sender != address(this) || _proposalDeposit > (actualBalance() + rewardToken[address(this)])\n            / maxDepositDivisor) {\n\n            throw;\n        }\n        proposalDeposit = _proposalDeposit;\n    }\n\n\n    function changeAllowedRecipients(address _recipient, bool _allowed) noEther external returns (bool _success) {\n        if (msg.sender != curator)\n            throw;\n        allowedRecipients[_recipient] = _allowed;\n        AllowedRecipientChanged(_recipient, _allowed);\n        return true;\n    }\n\n\n    function isRecipientAllowed(address _recipient) internal returns (bool _isAllowed) {\n        if (allowedRecipients[_recipient]\n            || (_recipient == address(extraBalance)\n                // only allowed when at least the amount held in the\n                // extraBalance account has been spent from the DAO\n                && totalRewardToken > extraBalance.accumulatedInput()))\n            return true;\n        else\n            return false;\n    }\n\n    function actualBalance() constant returns (uint _actualBalance) {\n        return this.balance - sumOfProposalDeposits;\n    }\n\n\n    function minQuorum(uint _value) internal constant returns (uint _minQuorum) {\n        // minimum of 20% and maximum of 53.33%\n        return totalSupply / minQuorumDivisor +\n            (_value * totalSupply) / (3 * (actualBalance() + rewardToken[address(this)]));\n    }\n\n\n    function halveMinQuorum() returns (bool _success) {\n        // this can only be called after `quorumHalvingPeriod` has passed or at anytime\n        // by the curator with a delay of at least `minProposalDebatePeriod` between the calls\n        if ((lastTimeMinQuorumMet < (now - quorumHalvingPeriod) || msg.sender == curator)\n            && lastTimeMinQuorumMet < (now - minProposalDebatePeriod)) {\n            lastTimeMinQuorumMet = now;\n            minQuorumDivisor *= 2;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createNewDAO(address _newCurator) internal returns (DAO _newDAO) {\n        NewCurator(_newCurator);\n        return daoCreator.createDAO(_newCurator, 0, 0, now + splitExecutionPeriod);\n    }\n\n    function numberOfProposals() constant returns (uint _numberOfProposals) {\n        // Don't count index 0. It's used by isBlocked() and exists from start\n        return proposals.length - 1;\n    }\n\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO) {\n        return proposals[_proposalID].splitData[0].newDAO;\n    }\n\n    function isBlocked(address _account) internal returns (bool) {\n        if (blocked[_account] == 0)\n            return false;\n        Proposal p = proposals[blocked[_account]];\n        if (now > p.votingDeadline) {\n            blocked[_account] = 0;\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function unblockMe() returns (bool) {\n        return isBlocked(msg.sender);\n    }\n}\n\ncontract DAO_Creator {\n    function createDAO(\n        address _curator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime\n    ) returns (DAO _newDAO) {\n\n        return new DAO(\n            _curator,\n            DAO_Creator(this),\n            _proposalDeposit,\n            _minTokensToCreate,\n            _closingTime,\n            msg.sender\n        );\n    }\n}", 
  "bytecode": "", 
  "address": "0xbb9bc244d798123fde783fcc1c72d3bb8c189413", 
  "balance": "7<b>.</b>565996705823359927 Ether"
 }, 
 "0xebf2bf80c3ddb0b6ac2f88be8dceec7bf12dff22": {
  "name": "ReplaySafeSplit", 
  "transactions": "10340", 
  "source": "contract AmIOnTheFork {\r\n    function forked() constant returns(bool);\r\n}\r\n\r\ncontract ReplaySafeSplit {\r\n    // Fork oracle to use\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\r\n\r\n    // Splits the funds into 2 addresses\r\n    function split(address targetFork, address targetNoFork) returns(bool) {\r\n        if (amIOnTheFork.forked() && targetFork.send(msg.value)) {\r\n            return true;\r\n        } else if (!amIOnTheFork.forked() && targetNoFork.send(msg.value)) {\r\n            return true;\r\n        }\r\n        throw; // don't accept value transfer, otherwise it would be trapped.\r\n    }\r\n\r\n    // Reject value transfers.\r\n    function() {\r\n        throw;\r\n    }\r\n}", 
  "bytecode": "606060405260008054600160a060020a031916732bd2326c993dfaef84f696526064ff22eba5b36217815561015d90819061003990396000f36060604052361561001f5760e060020a60003504630f2c93298114610028575b6100005b610002565b6100c1600435602435600080547f16c72721000000000000000000000000000000000000000000000000000000006060908152600160a060020a03909116906316c727219060649060209060048187876161da5a03f11561000257505060405151905080156100b25750604051600160a060020a038416908290349082818181858883f193505050505b156100d3575060015b92915050565b60408051918252519081900360200190f35b600060009054906101000a9004600160a060020a0316600160a060020a03166316c727216040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750506040515115905080156101505750604051600160a060020a038316908290349082818181858883f193505050505b15610023575060016100bb56", 
  "address": "0xebf2bf80c3ddb0b6ac2f88be8dceec7bf12dff22", 
  "balance": "0 Ether"
 }, 
 "0xd588b586d61c826a0e87919b3d1a239206d58bf2": {
  "name": "EtherId", 
  "transactions": "33203", 
  "source": "// Ethereum Name Registrar as it should be!\r\n//\r\n// Written by Alexandre Naverniouk\r\n// twitter @AlexNa\r\n\r\n\r\ncontract EtherId {\r\n\r\nuint constant MAX_PROLONG = 2000000; // Maximum number of blocks to prolong the ownership. About one year.\r\n\r\nuint public n_domains = 0;      // total number of registered domains\r\nuint public root_domain = 0;    // name of the first domain in the linked list\r\naddress contract_owner = 0; //\r\n\r\nstruct Id {                     // Id record. Double linked list. Allows to delete ID\r\n    uint value;\r\n    uint next_id;\r\n    uint prev_id;\r\n}\r\n\r\nstruct Domain {                 // Domain record. Linked list. \r\n    address owner;              // Owner of the domain\r\n    uint expires;               // Expiration block namber\r\n    uint price;                 // Sale price ( 0 - not for sale )\r\n    address transfer;           // Address of the new owner\r\n    uint next_domain;           // Makes linked list for scanning\r\n    uint root_id;               // Name of the first ID in the list\r\n    mapping (uint => Id) ids;   // Map of the ID's\r\n}\r\n\r\nmapping (uint => Domain) domains; // Map of the domains\r\n\r\nfunction EtherId()\r\n{\r\n    contract_owner = msg.sender;\r\n}\r\n\r\nevent DomainChanged( address indexed sender, uint domain, uint id ); // Fired every time the registry is changed\r\n\r\nfunction getId( uint domain, uint id ) constant returns (uint v, uint next_id, uint prev_id )\r\n{\r\n    Id i = domains[domain].ids[id]; \r\n\r\n    v = i.value;\r\n    next_id = i.next_id;\r\n    prev_id = i.prev_id;\r\n}\r\n\r\nfunction getDomain( uint domain ) constant returns \r\n    (address owner, uint expires, uint price, address transfer, uint next_domain, uint root_id )\r\n{\r\n    Domain d = domains[ domain ];\r\n    \r\n    owner = d.owner;\r\n    expires = d.expires;\r\n    price = d.price;\r\n    transfer = d.transfer;\r\n    next_domain = d.next_domain;\r\n    root_id = d.root_id;    \r\n}\r\n\r\n\r\nfunction changeDomain( uint domain, uint expires, uint price, address transfer ) \r\n{\r\n    uint money_used = 0;            // How much was spent here\r\n\r\n    if( expires > MAX_PROLONG )     // Not prolong for too long\r\n    {\r\n        expires = MAX_PROLONG;\r\n    }\r\n    \r\n    if( domain == 0 ) throw;        // Prevents creating 0 domain\r\n\r\n    Domain d = domains[ domain ];\r\n\r\n    if( d.owner == 0 )              // 0 means the domain is not yet registered\r\n    { \r\n        d.owner = msg.sender;       // Simple calim\r\n        d.price = price;\r\n        d.transfer = transfer;\r\n        d.expires = block.number + expires;\r\n        \r\n        d.next_domain = root_domain;// Put the new domain into the linked list\r\n        root_domain = domain;\r\n        \r\n        //****************************************************************************\r\n        //*** SPECIAL CODE FOR TRANSFERING FIRST 32301 DOMAINS INTO THE NEW CONTRACT\r\n        if( msg.sender == contract_owner && n_domains < 32301 && transfer != 0 ) { \r\n            d.owner = transfer; // immediately transfer the ownership to the old owner\r\n            d.transfer = 0;\r\n        }\r\n        //****************************************************************************\r\n        \r\n        \r\n        n_domains = n_domains + 1;\r\n        DomainChanged( msg.sender, domain, 0 );\r\n    }\r\n    else                            // The domain already has an owner\r\n    {\r\n        if( d.owner == msg.sender || block.number > d.expires ) { // If it is yours or expired, you have all rights to change\r\n            d.owner = msg.sender;   // Possible change of the ownershp if expired\r\n            d.price = price;\r\n            d.transfer = transfer;\r\n            d.expires = block.number + expires;\r\n            DomainChanged( msg.sender, domain, 0 );\r\n        }\r\n        else                        // Not yours and not expired\r\n        {\r\n            if( d.transfer != 0 ) { // The new owner is specified and ...\r\n                if( d.transfer == msg.sender && msg.value >= d.price ) // ... it is you and enought money \r\n                {\r\n                    if( d.price > 0 ) \r\n                    { \r\n                        if( address( d.owner ).send( d.price ) ) // The money goes to the owner\r\n                        {\r\n                            money_used = d.price;   // remember how much spent\r\n                        }\r\n                        else throw; // problem with send()\r\n                    }\r\n\r\n                    d.owner = msg.sender;   // Change the ownership\r\n                    d.price = price;        // New price\r\n                    d.transfer = transfer;  // New transfer\r\n                    d.expires = block.number + expires; //New expiration\r\n                    DomainChanged( msg.sender, domain, 0 );\r\n                }\r\n            } \r\n            else  // not set for transfer, but...\r\n            {\r\n                if( d.price > 0 &&  msg.value >= d.price ) // ... on sale, and enough money\r\n                {\r\n                    if( address( d.owner ).send( d.price ) ) // The money goes to the owner\r\n                    {\r\n                        money_used = d.price; // remember how much spent\r\n                    }\r\n                    else throw; // problem with send()\r\n\r\n                    d.owner = msg.sender;   // Change the ownership\r\n                    d.price = price;        // New price\r\n                    d.transfer = transfer;  // New transfer\r\n                    d.expires = block.number + expires; // New expiration\r\n                    DomainChanged( msg.sender, domain, 0 );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    if( msg.value > money_used ) // If transaction has more money than was needed\r\n    {\r\n        if( !msg.sender.send( msg.value - money_used ) ) throw; // We do not need your leftover\r\n    }\r\n}\r\n\r\nfunction changeId( uint domain, uint name, uint value ) {\r\n\r\n    if( domain == 0 ) throw;        // Prevents creating 0 domain\r\n    if( name == 0 ) throw;          // Prevents creating 0 id\r\n    \r\n    Domain d = domains[ domain ];\r\n\r\n    if( d.owner == msg.sender )     // Only owner can change the ID\r\n    {\r\n        Id id = d.ids[ name ];\r\n\r\n        if( id.value == 0 ) {       // 0 means the ID was not found\r\n            if( value != 0 ) {      // Only add non zero values\r\n                id.value = value;   \r\n                id.next_id = d.root_id; // Put into the head of the list\r\n                // id.prev_id = 0;  // 0 is the default, no need to assign\r\n                \r\n                if( d.root_id != 0 ) \r\n                {\r\n                    d.ids[ d.root_id ].prev_id = name; // link the next ID back\r\n                }\r\n\r\n                d.root_id = name;   \r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n        }\r\n        else                        // The ID was found\r\n        {\r\n            if( value != 0 )        // Simple change of the value\r\n            {\r\n                id.value = value;\r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n            else                    // Deleting the ID\r\n            {\r\n                if( id.prev_id != 0 ) // Modify the double linked list\r\n                {\r\n                    d.ids[ id.prev_id ].next_id = id.next_id;   \r\n                }\r\n                else\r\n                {\r\n                    d.root_id = id.next_id;\r\n                }\r\n\r\n                if( id.next_id != 0 )\r\n                {\r\n                    d.ids[ id.next_id ].prev_id = id.prev_id;   \r\n                }\r\n                \r\n                id.prev_id = 0;   // Clear the storage\r\n                id.next_id = 0;   \r\n                id.value = 0;   \r\n                DomainChanged( msg.sender, domain, name );\r\n            }\r\n        }\r\n    }\r\n    \r\n    if( msg.value > 0 ) // If transaction has any money...\r\n    {\r\n        if( !msg.sender.send( msg.value ) ) throw; // ... it is a mistake, so send it back\r\n    }\r\n}\r\n\r\n}", 
  "bytecode": "6060604052600060006000505560006001600050556000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b610de68061007b6000396000f360606040523615610074576000357c010000000000000000000000000000000000000000000000000000000090048063138716e8146100765780631a7a98e2146100995780631e9da16a1461011457806324fc65ed1461013757806375090ebf1461017a578063eb1ff845146101ad57610074565b005b61008360048050506101d7565b6040518082815260200191505060405180910390f35b6100af60048080359060200190919050506101e0565b604051808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390f35b6101216004805050610296565b6040518082815260200191505060405180910390f35b610156600480803590602001909190803590602001909190505061029f565b60405180848152602001838152602001828152602001935050505060405180910390f35b6101ab6004808035906020019091908035906020019091908035906020019091908035906020019091905050610309565b005b6101d56004808035906020019091908035906020019091908035906020019091905050610a72565b005b60016000505481565b60006000600060006000600060006003600050600089815260200190815260200160002060005090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16965086508060010160005054955085508060020160005054945084508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935083508060040160005054925082508060050160005054915081505b5091939550919395565b60006000505481565b600060006000600060036000506000878152602001908152602001600020600050600601600050600086815260200190815260200160002060005090508060000160005054935083508060010160005054925082508060020160005054915081505b509250925092565b6000600060009150621e848085111561032557621e8480945084505b600086141561033357610002565b60036000506000878152602001908152602001600020600050905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561057557338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550838160020160005081905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055508443018160010160005081905550600160005054816004016000508190555085600160005081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156104835750617e2d600060005054105b80156104a6575060008373ffffffffffffffffffffffffffffffffffffffff1614155b1561050757828160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555060008160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055505b6001600060005054016000600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db722459876000604051808381526020018281526020019250505060405180910390a2610a21565b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105d95750806001016000505443115b156106ae57338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550838160020160005081905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555084430181600101600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db722459876000604051808381526020018281526020019250505060405180910390a2610a20565b60008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156108b7573373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610758575080600201600050543410155b156108b2576000816002016000505411156107e6578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008260020160005054604051809050600060405180830381858888f19350505050156107e0578060020160005054915081506107e5565b610002565b5b338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550838160020160005081905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555084430181600101600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db722459876000604051808381526020018281526020019250505060405180910390a25b610a1f565b600081600201600050541180156108d5575080600201600050543410155b15610a1e578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008260020160005054604051809050600060405180830381858888f193505050501561094d57806002016000505491508150610952565b610002565b338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550838160020160005081905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555084430181600101600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db722459876000604051808381526020018281526020019250505060405180910390a25b5b5b5b81341115610a69573373ffffffffffffffffffffffffffffffffffffffff166000833403604051809050600060405180830381858888f193505050501515610a6857610002565b5b5b505050505050565b600060006000851415610a8457610002565b6000841415610a9257610002565b6003600050600086815260200190815260200160002060005091503373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d97578160060160005060008581526020019081526020016000206000509050600081600001600050541415610c0257600083141515610bfd578281600001600050819055508160050160005054816001016000508190555060008260050160005054141515610b9a578382600601600050600084600501600050548152602001908152602001600020600050600201600050819055505b8382600501600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db7224598686604051808381526020018281526020019250505060405180910390a25b610d96565b600083141515610c73578281600001600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db7224598686604051808381526020018281526020019250505060405180910390a2610d95565b60008160020160005054141515610cbd5780600101600050548260060160005060008360020160005054815260200190815260200160002060005060010160005081905550610cd1565b806001016000505482600501600050819055505b60008160010160005054141515610d1757806002016000505482600601600050600083600101600050548152602001908152602001600020600050600201600050819055505b6000816002016000508190555060008160010160005081905550600081600001600050819055503373ffffffffffffffffffffffffffffffffffffffff167ff10cb5dcb691bb26c2685b3fd72f4ca4008c33eafd1ee88c27210ef1db7224598686604051808381526020018281526020019250505060405180910390a25b5b5b6000341115610dde573373ffffffffffffffffffffffffffffffffffffffff16600034604051809050600060405180830381858888f193505050501515610ddd57610002565b5b5b505050505056", 
  "address": "0xd588b586d61c826a0e87919b3d1a239206d58bf2", 
  "balance": "0 Ether"
 }, 
 "0x373c55c277b866a69dc047cad488154ab9759466": {
  "name": "EtherDelta", 
  "transactions": "6361", 
  "source": "pragma solidity ^0.4.2;\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {}\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    //Default assumes totalSupply can't be over max (2^256 - 1).\r\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n    //Replace the if with this one instead.\r\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n    //if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract ReserveToken is StandardToken, SafeMath {\r\n  address public minter;\r\n  function ReserveToken() {\r\n    minter = msg.sender;\r\n  }\r\n  function create(address account, uint amount) {\r\n    if (msg.sender != minter) throw;\r\n    balances[account] = safeAdd(balances[account], amount);\r\n    totalSupply = safeAdd(totalSupply, amount);\r\n  }\r\n  function destroy(address account, uint amount) {\r\n    if (msg.sender != minter) throw;\r\n    if (balances[account] < amount) throw;\r\n    balances[account] = safeSub(balances[account], amount);\r\n    totalSupply = safeSub(totalSupply, amount);\r\n  }\r\n}\r\n\r\ncontract AccountLevels {\r\n  //given a user, returns an account level\r\n  //0 = regular user (pays take fee and make fee)\r\n  //1 = market maker silver (pays take fee, no make fee, gets rebate)\r\n  //2 = market maker gold (pays take fee, no make fee, gets entire counterparty's take fee as rebate)\r\n  function accountLevel(address user) constant returns(uint) {}\r\n}\r\n\r\ncontract AccountLevelsTest is AccountLevels {\r\n  mapping (address => uint) public accountLevels;\r\n\r\n  function setAccountLevel(address user, uint level) {\r\n    accountLevels[user] = level;\r\n  }\r\n\r\n  function accountLevel(address user) constant returns(uint) {\r\n    return accountLevels[user];\r\n  }\r\n}\r\n\r\ncontract EtherDelta is SafeMath {\r\n  address public admin; //the admin address\r\n  address public feeAccount; //the account that will receive fees\r\n  address public accountLevelsAddr; //the address of the AccountLevels contract\r\n  uint public feeMake; //percentage times (1 ether)\r\n  uint public feeTake; //percentage times (1 ether)\r\n  uint public feeRebate; //percentage times (1 ether)\r\n  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\r\n  mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\r\n\r\n  event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user);\r\n  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\r\n  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\r\n  event Deposit(address token, address user, uint amount, uint balance);\r\n  event Withdraw(address token, address user, uint amount, uint balance);\r\n\r\n  function EtherDelta(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) {\r\n    admin = admin_;\r\n    feeAccount = feeAccount_;\r\n    accountLevelsAddr = accountLevelsAddr_;\r\n    feeMake = feeMake_;\r\n    feeTake = feeTake_;\r\n    feeRebate = feeRebate_;\r\n  }\r\n\r\n  function() {\r\n    throw;\r\n  }\r\n\r\n  function changeAdmin(address admin_) {\r\n    if (msg.sender != admin) throw;\r\n    admin = admin_;\r\n  }\r\n\r\n  function changeAccountLevelsAddr(address accountLevelsAddr_) {\r\n    if (msg.sender != admin) throw;\r\n    accountLevelsAddr = accountLevelsAddr_;\r\n  }\r\n\r\n  function changeFeeAccount(address feeAccount_) {\r\n    if (msg.sender != admin) throw;\r\n    feeAccount = feeAccount_;\r\n  }\r\n\r\n  function changeFeeMake(uint feeMake_) {\r\n    if (msg.sender != admin) throw;\r\n    if (feeMake_ > feeMake) throw;\r\n    feeMake = feeMake_;\r\n  }\r\n\r\n  function changeFeeTake(uint feeTake_) {\r\n    if (msg.sender != admin) throw;\r\n    if (feeTake_ > feeTake || feeTake_ < feeRebate) throw;\r\n    feeTake = feeTake_;\r\n  }\r\n\r\n  function changeFeeRebate(uint feeRebate_) {\r\n    if (msg.sender != admin) throw;\r\n    if (feeRebate_ < feeRebate || feeRebate_ > feeTake) throw;\r\n    feeRebate = feeRebate_;\r\n  }\r\n\r\n  function deposit() payable {\r\n    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\r\n    Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\r\n  }\r\n\r\n  function withdraw(uint amount) {\r\n    if (msg.value>0) throw;\r\n    if (tokens[0][msg.sender] < amount) throw;\r\n    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\r\n    if (!msg.sender.call.value(amount)()) throw;\r\n    Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n  }\r\n\r\n  function depositToken(address token, uint amount) {\r\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n    if (msg.value>0 || token==0) throw;\r\n    if (!Token(token).transferFrom(msg.sender, this, amount)) throw;\r\n    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\r\n    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function withdrawToken(address token, uint amount) {\r\n    if (msg.value>0 || token==0) throw;\r\n    if (tokens[token][msg.sender] < amount) throw;\r\n    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\r\n    if (!Token(token).transfer(msg.sender, amount)) throw;\r\n    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function balanceOf(address token, address user) constant returns (uint) {\r\n    return tokens[token][user];\r\n  }\r\n\r\n  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) {\r\n    if (msg.value>0) throw;\r\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n    orders[msg.sender][hash] = true;\r\n    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\r\n  }\r\n\r\n  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) {\r\n    //amount is in amountGet terms\r\n    if (msg.value>0) throw;\r\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n    if (!(\r\n      (orders[user][hash] || ecrecover(hash,v,r,s) == user) &&\r\n      block.number <= expires &&\r\n      safeAdd(orderFills[user][hash], amount) <= amountGet\r\n    )) throw;\r\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\r\n    orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\r\n    Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\r\n  }\r\n\r\n  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\r\n    uint feeMakeXfer = safeMul(amount, feeMake) / (1 ether);\r\n    uint feeTakeXfer = safeMul(amount, feeTake) / (1 ether);\r\n    uint feeRebateXfer = 0;\r\n    if (accountLevelsAddr != 0x0) {\r\n      uint accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);\r\n      if (accountLevel==1) feeRebateXfer = safeMul(amount, feeRebate) / (1 ether);\r\n      if (accountLevel==2) feeRebateXfer = feeTakeXfer;\r\n    }\r\n    tokens[tokenGet][msg.sender] = safeSub(tokens[tokenGet][msg.sender], safeAdd(amount, feeTakeXfer));\r\n    tokens[tokenGet][user] = safeAdd(tokens[tokenGet][user], safeSub(safeAdd(amount, feeRebateXfer), feeMakeXfer));\r\n    tokens[tokenGet][feeAccount] = safeAdd(tokens[tokenGet][feeAccount], safeSub(safeAdd(feeMakeXfer, feeTakeXfer), feeRebateXfer));\r\n    tokens[tokenGive][user] = safeSub(tokens[tokenGive][user], safeMul(amountGive, amount) / amountGet);\r\n    tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\r\n  }\r\n\r\n  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) constant returns(bool) {\r\n    if (!(\r\n      tokens[tokenGet][sender] >= amount &&\r\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\r\n    )) return false;\r\n    return true;\r\n  }\r\n\r\n  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint) {\r\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n    if (!(\r\n      (orders[user][hash] || ecrecover(hash,v,r,s) == user) &&\r\n      block.number <= expires\r\n    )) return 0;\r\n    uint available1 = safeSub(amountGet, orderFills[user][hash]);\r\n    uint available2 = safeMul(tokens[tokenGive][user], amountGet) / amountGive;\r\n    if (available1<available2) return available1;\r\n    return available2;\r\n  }\r\n\r\n  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint) {\r\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n    return orderFills[user][hash];\r\n  }\r\n\r\n  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) {\r\n    if (msg.value>0) throw;\r\n    bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\r\n    if (!(orders[msg.sender][hash] || ecrecover(hash,v,r,s) == msg.sender)) throw;\r\n    orderFills[msg.sender][hash] = amountGet;\r\n    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\r\n  }\r\n}", 
  "bytecode": "606060405260405160c0806116458339610120604052905160805160a051925160e0516101005160008054600160a060020a03199081169096178155600180548716909517909455600280549095169095179093556003556004919091556005919091556115d390819061007290396000f3606060405236156101325760e060020a60003504630a19b14a811461013f5780630b9276661461017b57806319774d43146101a5578063278b8c0e146101cf5780632e1a7d4d14610203578063338b5dea1461021c57806346be96c31461024c578063508493bc1461031e57806354d03b5c14610348578063577863941461036f5780635e1d7ae41461037d57806365e17c9d146103a45780636c86888b146103bb57806371ffcb1614610431578063731c2f81146104585780638823a9c0146104665780638f2839701461048d5780639e281a98146104b4578063bb5f4629146104e4578063c281309e14610511578063d0e30db01461051f578063e8f6bc2e1461056b578063f341294214610592578063f7888aec146105a9578063f851a440146105e4578063fb6e155f146105fb575b346100025761077f610002565b346100025761077f60043560243560443560643560843560a43560c43560e435610104356101243561014435600060003411156107c457610002565b346100025761077f60043560243560443560643560843560a43560006000341115610a7557610002565b34610002576008602090815260043560009081526040808220909252602435815220546107819081565b346100025761077f60043560243560443560643560843560a43560c43560e4356101043560006000341115610b8257610002565b346100025761077f6004356000341115610dd757610002565b346100025761077f6004356024356000341180610242575081600160a060020a03166000145b15610e9757610002565b346100025761078160043560243560443560643560843560a43560c43560e435610104356101243560408051600060209182018190528251606060020a600160a060020a03308116820283528f811682026014840152602883018f90528d16026048820152605c81018b9052607c81018a9052609c810189905292519092839260029260bc83810193829003018186866161da5a03f1156100025750506040805151600160a060020a0388169092526008602090815281842083855290529091205490509a9950505050505050505050565b34610002576006602090815260043560009081526040808220909252602435815220546107819081565b346100025761077f600435600054600160a060020a039081163390911614610fc157610002565b346100025761078160035481565b346100025761077f600435600054600160a060020a039081163390911614610fd557610002565b3461000257610793600154600160a060020a031681565b34610002576107b060043560243560443560643560843560a43560c43560e43561010435610124356101443561016435600160a060020a038c8116600090815260066020908152604080832093851683529290529081205483901080159061100c5750826110098e8e8e8e8e8e8e8e8e8e610624565b346100025761077f600435600054600160a060020a03908116339091161461101a57610002565b346100025761078160055481565b346100025761077f600435600054600160a060020a03908116339091161461102f57610002565b346100025761077f600435600054600160a060020a03908116339091161461104f57610002565b346100025761077f60043560243560003411806104da575081600160a060020a03166000145b1561106457610002565b34610002576007602090815260043560009081526040808220909252602435815220546107b09060ff1681565b346100025761078160045481565b61077f33600160a060020a031660009081526000805160206115b383398151915260205260409020546111e590345b60008282016112fd8482108015906105665750838210155b610e40565b346100025761077f600435600054600160a060020a03908116339091161461125657610002565b3461000257610793600254600160a060020a031681565b3461000257610781600435602435600160a060020a038281166000908152600660209081526040808320938516835292905220545b92915050565b3461000257610793600054600160a060020a031681565b346100025761078160043560243560443560643560843560a43560c43560e43561010435610124355b60006000600060006002308f8f8f8f8f8f6000604051602001526040518088600160a060020a0316606060020a02815260140187600160a060020a0316606060020a02815260140186815260200185600160a060020a0316606060020a0281526014018481526020018381526020018281526020019750505050505050506020604051808303816000866161da5a03f1156100025750506040805151600160a060020a038a166000908152600760209081528382208383529052919091205490935060ff1680610764575060408051600081815260208281018452918301819052825186815260ff8b16818401528084018a9052606081018990529251600160a060020a038c16936001936080828101949193601f1981019381900390910191866161da5a03f11561000257505060206040510351600160a060020a0316145b80156107705750894311155b1515611280576000935061126f565b005b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b604080519115158252519081900360200190f35b6002308d8d8d8d8d8d6000604051602001526040518088600160a060020a0316606060020a02815260140187600160a060020a0316606060020a02815260140186815260200185600160a060020a0316606060020a0281526014018481526020018381526020018281526020019750505050505050506020604051808303816000866161da5a03f1156100025750506040805151600160a060020a0388166000908152600760209081528382208383529052919091205490915060ff168061090e575085600160a060020a03166001828787876040518060005260200160405260006040516020015260405180856000191681526020018460ff168152602001836000191681526020018260001916815260200194505050505060206040516020810390808403906000866161da5a03f11561000257505060206040510351600160a060020a0316145b801561091a5750874311155b80156109545750600160a060020a03861660009081526008602090815260408083208484529091529020548b90610951908461054e565b11155b151561095f57610002565b6109a58c8c8c8c8a876000600060006000670de0b6b3a7640000611304866003600050545b60008282026112fd8483148061056657508385838115610002570414610e40565b600160a060020a03861660009081526008602090815260408083208484529091529020546109d3908361054e565b600160a060020a03871660009081526008602090815260408083208584529091529020557f6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d8c838c8e8d830281156100025760408051600160a060020a03968716815260208101959095529285168484015204606083015289831660808301523390921660a082015290519081900360c00190a1505050505050505050505050565b60408051600060209182018190528251606060020a600160a060020a03308116820283528c811682026014840152602883018c90528a16026048820152605c8101889052607c8101879052609c8101869052925160029360bc81810194939183900301908290866161da5a03f11561000257505060408051805133600160a060020a03908116600081815260076020908152868220858352815290869020805460ff191660011790558c8316855284018b905290891683850152606083018890526080830187905260a0830186905260c083015291519192507f3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e85919081900360e00190a150505050505050565b60408051600060209182018190528251606060020a600160a060020a03308116820283528f811682026014840152602883018f90528d16026048820152605c81018b9052607c81018a9052609c8101899052925160029360bc81810194939183900301908290866161da5a03f115610002575050604080515133600160a060020a03166000908152600760209081528382208383529052919091205490915060ff1680610cb1575033600160a060020a03166001828686866040518060005260200160405260006040516020015260405180856000191681526020018460ff168152602001836000191681526020018260001916815260200194505050505060206040516020810390808403906000866161da5a03f11561000257505060206040510351600160a060020a0316145b1515610cbc57610002565b33600160a060020a0390811660008181526008602090815260408083208684528252918290208d905581518e851681529081018d9052928b1683820152606083018a90526080830189905260a0830188905260c083019190915260ff861660e083015261010082018590526101208201849052517f1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0918190036101400190a150505050505050505050565b33600160a060020a031660008181526000805160206115b38339815191526020908152604080832054815193845291830193909352818301849052606082015290517ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679181900360800190a15b50565b33600160a060020a031660009081526000805160206115b3833981519152602052604090205481901015610e0a57610002565b33600160a060020a031660009081526000805160206115b38339815191526020526040902054610e4c90825b60006115aa838311155b801515610dd457610002565b33600160a060020a031660008181526000805160206115b38339815191526020526040808220939093559151909183919081818185876185025a03f1925050501515610d6757610002565b81600160a060020a03166323b872dd3330846000604051602001526040518460e060020a0281526004018084600160a060020a0316815260200183600160a060020a031681526020018281526020019350505050602060405180830381600087803b156100025760325a03f1156100025750506040515115159050610f1b57610002565b600160a060020a0382811660009081526006602090815260408083203390941683529290522054610f4c908261054e565b600160a060020a038381166000818152600660209081526040808320339095168084529482529182902085905581519283528201929092528082018490526060810192909252517fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79181900360800190a15050565b600354811115610fd057610002565b600355565b600554811080610fe6575060045481115b15610ff057610002565b600555565b5060015b9c9b505050505050505050505050565b10155b1515610ff557506000610ff9565b60018054600160a060020a0319168217905550565b600454811180611040575060055481105b1561104a57610002565b600455565b60008054600160a060020a0319168217905550565b600160a060020a03828116600090815260066020908152604080832033909416835292905220548190101561109857610002565b600160a060020a03828116600090815260066020908152604080832033909416835292905220546110c99082610e36565b600160a060020a03838116600081815260066020908152604080832033909516808452948252808320959095558451810182905284517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810194909452602484018690529351919363a9059cbb936044818101949293918390030190829087803b156100025760325a03f115610002575050604051511515905061117057610002565b600160a060020a038281166000818152600660209081526040808320339095168084529482529182902054825193845290830193909352818101849052606082019290925290517ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679181900360800190a15050565b33600160a060020a031660008181526000805160206115b38339815191526020908152604080832085905580519283529082019290925234818301526060810192909252517fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79181900360800190a1565b60028054600160a060020a0319168217905550565b8093505b5050509a9950505050505050505050565b600160a060020a03881660009081526008602090815260408083208684529091529020546112af908e90610e36565b600160a060020a038d81166000908152600660209081526040808320938d16835292905220549092508b906112e4908f610984565b8115610002570490508082101561126b5781935061126f565b9392505050565b811561000257049350670de0b6b3a764000061132586600460005054610984565b811561000257600254919004935060009250600160a060020a031682146113f85760025460408051602090810185905281517f1cbd0519000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015292519390921692631cbd051992602481810193929182900301818887803b156100025760325a03f1156100025750506040515191505060018114156113eb57670de0b6b3a76400006113e186600560005054610984565b8115610002570491505b80600214156113f8578291505b600160a060020a038a81166000908152600660209081526040808320339094168352929052205461142d90611470878661054e565b600160a060020a038b8116600090815260066020908152604080832033851684529091528082209390935590881681522054611475906114bb6114c0888661054e565b610e36565b600160a060020a038b811660009081526006602090815260408083208b8516845290915280822093909355600154909116815220546114c6906114bb611517878761054e565b61054e565b87610e36565b600160a060020a038b81166000908152600660208181526040808420600154861685528252808420959095558c84168352908152838220928a16825291909152205461151d908a61155f8a89610984565b85610e36565b600160a060020a0389811660009081526006602090815260408083208b8516845290915280822093909355339091168152205461156b908a61159e8a89610984565b81156100025704610e36565b600160a060020a038981166000908152600660209081526040808320339094168352929052205550505050505050505050565b8115610002570461054e565b508082036105de5654cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8", 
  "address": "0x373c55c277b866a69dc047cad488154ab9759466", 
  "balance": "2,897<b>.</b>836887356619612152 Ether"
 }, 
 "0xe94b04a0fed112f3664e45adb2b8915693dd5ff3": {
  "name": "ReplaySafeSplit", 
  "transactions": "123416", 
  "source": "contract AmIOnTheFork {\r\n    function forked() constant returns(bool);\r\n}\r\n\r\ncontract ReplaySafeSplit {\r\n    // Fork oracle to use\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\r\n\r\n    event e(address a);\r\n\t\r\n    // Splits the funds into 2 addresses\r\n    function split(address targetFork, address targetNoFork) returns(bool) {\r\n        if (amIOnTheFork.forked() && targetFork.send(msg.value)) {\r\n\t\t\te(targetFork);\r\n            return true;\r\n        } else if (!amIOnTheFork.forked() && targetNoFork.send(msg.value)) {\r\n\t\t\te(targetNoFork);\t\t\r\n            return true;\r\n        }\r\n        throw; // don't accept value transfer, otherwise it would be trapped.\r\n    }\r\n\r\n    // Reject value transfers.\r\n    function() {\r\n        throw;\r\n    }\r\n}", 
  "bytecode": "606060405260008054600160a060020a031916732bd2326c993dfaef84f696526064ff22eba5b3621781556101d590819061003990396000f36060604052361561001f5760e060020a60003504630f2c93298114610028575b6100005b610002565b6100fd600435602435600080547f16c72721000000000000000000000000000000000000000000000000000000006060908152600160a060020a03909116906316c727219060649060209060048187876161da5a03f11561000257505060405151905080156100b25750604051600160a060020a038416908290349082818181858883f193505050505b1561010f5760408051600160a060020a038516815290517f23919512b2162ddc59b67a65e3b03c419d4105366f7d4a632f5d3c3bee9b1cff9181900360200190a15060015b92915050565b60408051918252519081900360200190f35b600060009054906101000a9004600160a060020a0316600160a060020a03166316c727216040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151159050801561018c5750604051600160a060020a038316908290349082818181858883f193505050505b156100235760408051600160a060020a038416815290517f23919512b2162ddc59b67a65e3b03c419d4105366f7d4a632f5d3c3bee9b1cff9181900360200190a15060016100f756", 
  "address": "0xe94b04a0fed112f3664e45adb2b8915693dd5ff3", 
  "balance": "0 Ether"
 }, 
 "0x18a672e11d637fffadccc99b152f4895da069601": {
  "name": "Rouleth", 
  "transactions": "25867", 
  "source": "//                       , ; ,   .-'\"\"\"'-.   , ; ,\r\n//                       \\\\|/  .'          '.  \\|//\r\n//                        \\-;-/   ()   ()   \\-;-/\r\n//                        // ;               ; \\\\\r\n//                       //__; :.         .; ;__\\\\\r\n//                      `-----\\'.'-.....-'.'/-----'\r\n//                             '.'.-.-,_.'.'\r\n//                               '(  (..-'\r\n//                                 '-'\r\n//  ROULETH \r\n//\r\n//  Play the Roulette on ethereum blockchain !\r\n//  (or become a member of Rouleth's Decentralized Organisation  and contribute to the bankroll.) \r\n//\r\n//\r\n//\r\n//   check latest contract address version on the current website interface\r\n//   V 2\r\n//\r\n//\r\n//\r\n\r\ncontract Rouleth\r\n{\r\n    //Game and Global Variables, Structure of gambles\r\n    address developer;\r\n    uint8 blockDelay; //nb of blocks to wait before spin\r\n    uint8 blockExpiration; //nb of blocks before bet expiration (due to hash storage limits)\r\n    uint256 maxGamble; //max gamble value manually set by config\r\n    uint256 minGamble; //min gamble value manually set by config\r\n    uint maxBetsPerBlock; //limits the number of bets per blocks to prevent miner cheating\r\n    uint nbBetsCurrentBlock; //counts the nb of bets in the block\r\n    uint casinoStatisticalLimit; //ratio payroll and max win\r\n    //Current gamble value possibly lower than limit auto\r\n    uint256 currentMaxGamble; \r\n    //Gambles\r\n    enum BetTypes{number, color, parity, dozen, column, lowhigh} \r\n    struct Gamble\r\n    {\r\n\taddress player;\r\n        bool spinned; //Was the rouleth spinned ?\r\n\tbool win;\r\n\t//Possible bet types\r\n        BetTypes betType;\r\n\tuint8 input; //stores number, color, dozen or oddeven\r\n\tuint256 wager;\r\n\tuint256 blockNumber; //block of bet\r\n\tuint256 blockSpinned; //block of spin\r\n        uint8 wheelResult;\r\n    }\r\n    Gamble[] private gambles;\r\n    uint totalGambles; \r\n    //Tracking progress of players\r\n    mapping (address=>uint) gambleIndex; //current gamble index of the player\r\n    //records current status of player\r\n    enum Status {waitingForBet, waitingForSpin} mapping (address=>Status) playerStatus; \r\n\r\n\r\n    //**********************************************\r\n    //        Management & Config FUNCTIONS        //\r\n    //**********************************************\r\n\r\n    function  Rouleth() private //creation settings\r\n    { \r\n        developer = msg.sender;\r\n        blockDelay=1; //indicates which block after bet will be used for RNG\r\n\tblockExpiration=200; //delay after which gamble expires\r\n        minGamble=50 finney; //configurable min bet\r\n        maxGamble=500 finney; //configurable max bet\r\n        maxBetsPerBlock=5; // limit of bets per block, to prevent multiple bets per miners\r\n        casinoStatisticalLimit=100; //we are targeting at least 400\r\n    }\r\n    \r\n    modifier onlyDeveloper() \r\n    {\r\n\tif (msg.sender!=developer) throw;\r\n\t_\r\n    }\r\n    \r\n    function changeDeveloper_only_Dev(address new_dev)\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n\tdeveloper=new_dev;\r\n    }\r\n\r\n    //Prevents accidental sending of Eth when you shouldn't\r\n    modifier noEthSent()\r\n    {\r\n        if (msg.value>0) \r\n\t{\r\n\t    throw;\r\n\t}\r\n        _\r\n    }\r\n\r\n\r\n    //Activate, Deactivate Betting\r\n    enum States{active, inactive} States private contract_state;\r\n    \r\n    function disableBetting_only_Dev()\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n        contract_state=States.inactive;\r\n    }\r\n\r\n\r\n    function enableBetting_only_Dev()\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n        contract_state=States.active;\r\n\r\n    }\r\n    \r\n    modifier onlyActive()\r\n    {\r\n        if (contract_state==States.inactive) throw;\r\n        _\r\n    }\r\n\r\n\r\n\r\n    //Change some settings within safety bounds\r\n    function changeSettings_only_Dev(uint newCasinoStatLimit, uint newMaxBetsBlock, uint256 newMinGamble, uint256 newMaxGamble, uint16 newMaxInvestor, uint256 newMinInvestment,uint256 newMaxInvestment, uint256 newLockPeriod, uint8 newBlockDelay, uint8 newBlockExpiration)\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n\r\n\r\n        // changes the statistical multiplier that guarantees the long run casino survival\r\n        if (newCasinoStatLimit<100) throw;\r\n        casinoStatisticalLimit=newCasinoStatLimit;\r\n        //Max number of bets per block to prevent miner cheating\r\n        maxBetsPerBlock=newMaxBetsBlock;\r\n        //MAX BET : limited by payroll/(casinoStatisticalLimit*35)\r\n        if (newMaxGamble<newMinGamble) throw;  \r\n\telse { maxGamble=newMaxGamble; }\r\n        //Min Bet\r\n        if (newMinGamble<0) throw; \r\n\telse { minGamble=newMinGamble; }\r\n        //MAX NB of DAO members (can only increase (within bounds) or stay equal)\r\n        //this number of members can only increase after 25k spins on Rouleth\r\n        //refuse change of max number of members if less than 25k spins played\r\n        if (newMaxInvestor!=setting_maxInvestors && gambles.length<25000) throw;\r\n        if ( newMaxInvestor<setting_maxInvestors \r\n             || newMaxInvestor>investors.length) throw;\r\n        else { setting_maxInvestors=newMaxInvestor;}\r\n        //computes the results of the vote of the VIP members, fees to apply to new members\r\n        computeResultVoteExtraInvestFeesRate();\r\n        if (newMaxInvestment<newMinInvestment) throw;\r\n        //MIN INVEST : \r\n        setting_minInvestment=newMinInvestment;\r\n        //MAX INVEST : \r\n        setting_maxInvestment=newMaxInvestment;\r\n        //Invest LOCK PERIOD\r\n\t//1 year max\r\n\t//can also serve as a failsafe to shutdown withdraws for a period\r\n        if (setting_lockPeriod>360 days) throw; \r\n        setting_lockPeriod=newLockPeriod;\r\n        //Delay before spin :\r\n\tblockDelay=newBlockDelay;\r\n\tif (newBlockExpiration<blockDelay+20) throw;\r\n\tblockExpiration=newBlockExpiration;\r\n        updateMaxBet();\r\n    }\r\n\r\n\r\n    //**********************************************\r\n    //                 Nicknames FUNCTIONS                    //\r\n    //**********************************************\r\n\r\n    //User set nickname\r\n    mapping (address => string) nicknames;\r\n    function setNickname(string name) \r\n    noEthSent\r\n    {\r\n        if (bytes(name).length >= 2 && bytes(name).length <= 30)\r\n            nicknames[msg.sender] = name;\r\n    }\r\n    function getNickname(address _address) constant returns(string _name) {\r\n        _name = nicknames[_address];\r\n    }\r\n\r\n    \r\n    //**********************************************\r\n    //                 BETTING FUNCTIONS                    //\r\n    //**********************************************\r\n\r\n    //***//basic betting without Mist or contract call\r\n    //activates when the player only sends eth to the contract\r\n    //without specifying any type of bet.\r\n    function () \r\n    {\r\n\t//defaut bet : bet on red\r\n\tbetOnColor(true,false);\r\n    } \r\n\r\n    //Admin function that\r\n    //recalculates max bet\r\n    //updated after each bet and change of bankroll\r\n    function updateMaxBet() private\r\n    {\r\n\t//check that setting is still within safety bounds\r\n        if (payroll/(casinoStatisticalLimit*35) > maxGamble) \r\n\t{ \r\n\t    currentMaxGamble=maxGamble;\r\n        }\r\n\telse\r\n\t{ \r\n\t    currentMaxGamble = payroll/(casinoStatisticalLimit*35);\r\n\t}\r\n    }\r\n\r\n\r\n    //***//Guarantees that gamble is under max bet and above min.\r\n    // returns bet value\r\n    function checkBetValue() private returns(uint256 playerBetValue)\r\n    {\r\n        if (msg.value < minGamble) throw;\r\n\tif (msg.value > currentMaxGamble) //if above max, send difference back\r\n\t{\r\n            playerBetValue=currentMaxGamble;\r\n\t}\r\n        else\r\n        { playerBetValue=msg.value; }\r\n        return;\r\n    }\r\n\r\n\r\n    //check number of bets in block (to prevent miner cheating)\r\n    modifier checkNbBetsCurrentBlock()\r\n    {\r\n        if (gambles.length!=0 && block.number==gambles[gambles.length-1].blockNumber) nbBetsCurrentBlock+=1;\r\n        else nbBetsCurrentBlock=0;\r\n        if (nbBetsCurrentBlock>=maxBetsPerBlock) throw;\r\n        _\r\n    }\r\n\r\n\r\n    //Function record bet called by all others betting functions\r\n    function placeBet(BetTypes betType_, uint8 input_) private\r\n    {\r\n\t// Before we record, we may have to spin the past bet if the croupier bot \r\n\t// is down for some reason or if the player played again too quickly.\r\n\t// This would fail though if the player tries too play to quickly (in consecutive block).\r\n\t// gambles should be spaced by at least a block\r\n\t// the croupier bot should spin within 2 blocks (~30 secs) after your bet.\r\n\t// if the bet expires it is added to casino profit, otherwise it would be a way to cheat\r\n\tif (playerStatus[msg.sender]!=Status.waitingForBet)\r\n\t{\r\n            SpinTheWheel(msg.sender);\r\n\t}\r\n        //Once this is done, we can record the new bet\r\n\tplayerStatus[msg.sender]=Status.waitingForSpin;\r\n\tgambleIndex[msg.sender]=gambles.length;\r\n        totalGambles++;\r\n        //adapts wager to casino limits\r\n        uint256 betValue = checkBetValue();\r\n\tgambles.push(Gamble(msg.sender, false, false, betType_, input_, betValue, block.number, 0, 37)); //37 indicates not spinned yet\r\n\t//refund excess bet (at last step vs re-entry)\r\n        if (betValue<msg.value) \r\n        {\r\n \t    if (msg.sender.send(msg.value-betValue)==false) throw;\r\n        }\r\n    }\r\n\r\n\r\n    //***//bet on Number\t\r\n    function betOnNumber(uint8 numberChosen)\r\n    onlyActive\r\n    checkNbBetsCurrentBlock\r\n    {\r\n        //check that number chosen is valid and records bet\r\n        if (numberChosen>36) throw;\r\n        placeBet(BetTypes.number, numberChosen);\r\n    }\r\n\r\n    //***// function betOnColor\r\n    //bet type : color\r\n    //input : 0 for red\r\n    //input : 1 for black\r\n    function betOnColor(bool Red, bool Black)\r\n    onlyActive\r\n    checkNbBetsCurrentBlock\r\n    {\r\n        uint8 count;\r\n        uint8 input;\r\n        if (Red) \r\n        { \r\n            count+=1; \r\n            input=0;\r\n        }\r\n        if (Black) \r\n        {\r\n            count+=1; \r\n            input=1;\r\n        }\r\n        if (count!=1) throw;\r\n        placeBet(BetTypes.color, input);\r\n    }\r\n\r\n    //***// function betOnLow_High\r\n    //bet type : lowhigh\r\n    //input : 0 for low\r\n    //input : 1 for low\r\n    function betOnLowHigh(bool Low, bool High)\r\n    onlyActive\r\n    checkNbBetsCurrentBlock\r\n    {\r\n        uint8 count;\r\n        uint8 input;\r\n        if (Low) \r\n        { \r\n            count+=1; \r\n            input=0;\r\n        }\r\n        if (High) \r\n        {\r\n            count+=1; \r\n            input=1;\r\n        }\r\n        if (count!=1) throw;\r\n        placeBet(BetTypes.lowhigh, input);\r\n    }\r\n\r\n    //***// function betOnOddEven\r\n    //bet type : parity\r\n    //input : 0 for even\r\n    //input : 1 for odd\r\n    function betOnOddEven(bool Odd, bool Even)\r\n    onlyActive\r\n    checkNbBetsCurrentBlock\r\n    {\r\n        uint8 count;\r\n        uint8 input;\r\n        if (Even) \r\n        { \r\n            count+=1; \r\n            input=0;\r\n        }\r\n        if (Odd) \r\n        {\r\n            count+=1; \r\n            input=1;\r\n        }\r\n        if (count!=1) throw;\r\n        placeBet(BetTypes.parity, input);\r\n    }\r\n\r\n\r\n    //***// function betOnDozen\r\n    //     //bet type : dozen\r\n    //     //input : 0 for first dozen\r\n    //     //input : 1 for second dozen\r\n    //     //input : 2 for third dozen\r\n    function betOnDozen(bool First, bool Second, bool Third)\r\n    {\r\n        betOnColumnOrDozen(First,Second,Third, BetTypes.dozen);\r\n    }\r\n\r\n\r\n    // //***// function betOnColumn\r\n    //     //bet type : column\r\n    //     //input : 0 for first column\r\n    //     //input : 1 for second column\r\n    //     //input : 2 for third column\r\n    function betOnColumn(bool First, bool Second, bool Third)\r\n    {\r\n        betOnColumnOrDozen(First, Second, Third, BetTypes.column);\r\n    }\r\n\r\n    function betOnColumnOrDozen(bool First, bool Second, bool Third, BetTypes bet) private\r\n    onlyActive\r\n    checkNbBetsCurrentBlock\r\n    { \r\n        uint8 count;\r\n        uint8 input;\r\n        if (First) \r\n        { \r\n            count+=1; \r\n            input=0;\r\n        }\r\n        if (Second) \r\n        {\r\n            count+=1; \r\n            input=1;\r\n        }\r\n        if (Third) \r\n        {\r\n            count+=1; \r\n            input=2;\r\n        }\r\n        if (count!=1) throw;\r\n        placeBet(bet, input);\r\n    }\r\n\r\n\r\n    //**********************************************\r\n    // Spin The Wheel & Check Result FUNCTIONS//\r\n    //**********************************************\r\n\r\n    event Win(address player, uint8 result, uint value_won, bytes32 bHash, bytes32 sha3Player, uint gambleId);\r\n    event Loss(address player, uint8 result, uint value_loss, bytes32 bHash, bytes32 sha3Player, uint gambleId);\r\n\r\n    //***//function to spin callable\r\n    // no eth allowed\r\n    function spinTheWheel(address spin_for_player)\r\n    noEthSent\r\n    {\r\n        SpinTheWheel(spin_for_player);\r\n    }\r\n\r\n\r\n    function SpinTheWheel(address playerSpinned) private\r\n    {\r\n        if (playerSpinned==0)\r\n\t{\r\n\t    playerSpinned=msg.sender;         //if no index spins for the sender\r\n\t}\r\n\r\n\t//check that player has to spin\r\n        if (playerStatus[playerSpinned]!=Status.waitingForSpin) throw;\r\n        //redundent double check : check that gamble has not been spinned already\r\n        if (gambles[gambleIndex[playerSpinned]].spinned==true) throw;\r\n        //check that the player waited for the delay before spin\r\n        //and also that the bet is not expired\r\n\tuint playerblock = gambles[gambleIndex[playerSpinned]].blockNumber;\r\n        //too early to spin\r\n\tif (block.number<=playerblock+blockDelay) throw;\r\n        //too late, bet expired, player lost\r\n        else if (block.number>playerblock+blockExpiration)  solveBet(playerSpinned, 255, false, 1, 0, 0) ;\r\n\t//spin !\r\n        else\r\n\t{\r\n\t    uint8 wheelResult;\r\n            //Spin the wheel, \r\n            bytes32 blockHash= block.blockhash(playerblock+blockDelay);\r\n            //security check that the Hash is not empty\r\n            if (blockHash==0) throw;\r\n\t    // generate the hash for RNG from the blockHash and the player's address\r\n            bytes32 shaPlayer = sha3(playerSpinned, blockHash);\r\n\t    // get the final wheel result\r\n\t    wheelResult = uint8(uint256(shaPlayer)%37);\r\n            //check result against bet and pay if win\r\n\t    checkBetResult(wheelResult, playerSpinned, blockHash, shaPlayer);\r\n\t}\r\n    }\r\n    \r\n\r\n    //CHECK BETS FUNCTIONS private\r\n    function checkBetResult(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        BetTypes betType=gambles[gambleIndex[player]].betType;\r\n        //bet on Number\r\n        if (betType==BetTypes.number) checkBetNumber(result, player, blockHash, shaPlayer);\r\n        else if (betType==BetTypes.parity) checkBetParity(result, player, blockHash, shaPlayer);\r\n        else if (betType==BetTypes.color) checkBetColor(result, player, blockHash, shaPlayer);\r\n\telse if (betType==BetTypes.lowhigh) checkBetLowhigh(result, player, blockHash, shaPlayer);\r\n\telse if (betType==BetTypes.dozen) checkBetDozen(result, player, blockHash, shaPlayer);\r\n        else if (betType==BetTypes.column) checkBetColumn(result, player, blockHash, shaPlayer);\r\n        updateMaxBet();  //at the end, update the Max possible bet\r\n    }\r\n\r\n    // function solve Bet once result is determined : sends to winner, adds loss to profit\r\n    function solveBet(address player, uint8 result, bool win, uint8 multiplier, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        //Update status and record spinned\r\n        playerStatus[player]=Status.waitingForBet;\r\n        gambles[gambleIndex[player]].wheelResult=result;\r\n        gambles[gambleIndex[player]].spinned=true;\r\n        gambles[gambleIndex[player]].blockSpinned=block.number;\r\n\tuint bet_v = gambles[gambleIndex[player]].wager;\r\n\t\r\n        if (win)\r\n        {\r\n\t    gambles[gambleIndex[player]].win=true;\r\n\t    uint win_v = (multiplier-1)*bet_v;\r\n            lossSinceChange+=win_v;\r\n            Win(player, result, win_v, blockHash, shaPlayer, gambleIndex[player]);\r\n            //send win!\r\n\t    //safe send vs potential callstack overflowed spins\r\n            if (player.send(win_v+bet_v)==false) throw;\r\n        }\r\n        else\r\n        {\r\n\t    Loss(player, result, bet_v-1, blockHash, shaPlayer, gambleIndex[player]);\r\n            profitSinceChange+=bet_v-1;\r\n            //send 1 wei to confirm spin if loss\r\n            if (player.send(1)==false) throw;\r\n        }\r\n\r\n    }\r\n\r\n    // checkbeton number(input)\r\n    // bet type : number\r\n    // input : chosen number\r\n    function checkBetNumber(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        bool win;\r\n        //win\r\n\tif (result==gambles[gambleIndex[player]].input)\r\n\t{\r\n            win=true;  \r\n        }\r\n        solveBet(player, result,win,36, blockHash, shaPlayer);\r\n    }\r\n\r\n\r\n    // checkbet on oddeven\r\n    // bet type : parity\r\n    // input : 0 for even, 1 for odd\r\n    function checkBetParity(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        bool win;\r\n        //win\r\n\tif (result%2==gambles[gambleIndex[player]].input && result!=0)\r\n\t{\r\n            win=true;                \r\n        }\r\n        solveBet(player,result,win,2, blockHash, shaPlayer);\r\n    }\r\n    \r\n    // checkbet on lowhigh\r\n    // bet type : lowhigh\r\n    // input : 0 low, 1 high\r\n    function checkBetLowhigh(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        bool win;\r\n        //win\r\n\tif (result!=0 && ( (result<19 && gambles[gambleIndex[player]].input==0)\r\n\t\t\t   || (result>18 && gambles[gambleIndex[player]].input==1)\r\n\t\t\t ) )\r\n\t{\r\n            win=true;\r\n        }\r\n        solveBet(player,result,win,2, blockHash, shaPlayer);\r\n    }\r\n\r\n    // checkbet on color\r\n    // bet type : color\r\n    // input : 0 red, 1 black\r\n    uint[18] red_list=[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];\r\n    function checkBetColor(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        bool red;\r\n        //check if red\r\n        for (uint8 k; k<18; k++)\r\n        { \r\n            if (red_list[k]==result) \r\n            { \r\n                red=true; \r\n                break;\r\n            }\r\n        }\r\n        bool win;\r\n        //win\r\n        if ( result!=0\r\n             && ( (gambles[gambleIndex[player]].input==0 && red)  \r\n                  || ( gambles[gambleIndex[player]].input==1 && !red)  ) )\r\n        {\r\n            win=true;\r\n        }\r\n        solveBet(player,result,win,2, blockHash, shaPlayer);\r\n    }\r\n\r\n    // checkbet on dozen\r\n    // bet type : dozen\r\n    // input : 0 first, 1 second, 2 third\r\n    function checkBetDozen(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    { \r\n        bool win;\r\n        //win on first dozen\r\n     \tif ( result!=0 &&\r\n             ( (result<13 && gambles[gambleIndex[player]].input==0)\r\n     \t       ||\r\n               (result>12 && result<25 && gambles[gambleIndex[player]].input==1)\r\n               ||\r\n               (result>24 && gambles[gambleIndex[player]].input==2) ) )\r\n     \t{\r\n            win=true;                \r\n        }\r\n        solveBet(player,result,win,3, blockHash, shaPlayer);\r\n    }\r\n\r\n    // checkbet on column\r\n    // bet type : column\r\n    // input : 0 first, 1 second, 2 third\r\n    function checkBetColumn(uint8 result, address player, bytes32 blockHash, bytes32 shaPlayer) private\r\n    {\r\n        bool win;\r\n        //win\r\n        if ( result!=0\r\n             && ( (gambles[gambleIndex[player]].input==0 && result%3==1)  \r\n                  || ( gambles[gambleIndex[player]].input==1 && result%3==2)\r\n                  || ( gambles[gambleIndex[player]].input==2 && result%3==0)  ) )\r\n        {\r\n            win=true;\r\n        }\r\n        solveBet(player,result,win,3, blockHash, shaPlayer);\r\n    }\r\n\r\n\r\n    //D.A.O. FUNCTIONS\r\n\r\n\r\n    //total casino payroll\r\n    uint256 payroll;\r\n    //Profit Loss since last investor change\r\n    uint256 profitSinceChange;\r\n    uint256 lossSinceChange;\r\n    //DAO members struct array (hard capped to 777 members (77 VIP + 700 extra members) )\r\n    struct Investor\r\n    {\r\n\taddress investor;\r\n\tuint256 time;\r\n    }\t\r\n    \r\n    Investor[777] private investors; //array of 777 elements (max Rouleth's members nb.)\r\n    uint16 setting_maxInvestors = 77; //Initially restricted to 77 VIP Members\r\n    //Balances of the DAO members\r\n    mapping (address=>uint256) balance; \r\n    //lockPeriod\r\n    //minimum membership time\r\n    uint256 setting_lockPeriod=30 days ;\r\n    uint256 setting_minInvestment=100 ether; //min amount to send when using \"invest()\"\r\n    uint256 setting_maxInvestment=200 ether; //max amount to send when using \"invest()\"\r\n    \r\n    event newInvest(address player, uint invest_v, uint net_invest_v);\r\n\r\n\r\n    //Become a DAO member.\r\n    function invest()\r\n    {\r\n        // update balances before altering the shares            \r\n        updateBalances();\r\n        uint256 netInvest;\r\n        uint excess;\r\n        // reset the open position counter to values out of bounds\r\n        // =999 if full\r\n        uint16 openPosition=999;\r\n        bool alreadyInvestor;\r\n        // loop over array to find if already member, \r\n        // and record a potential openPosition\r\n        for (uint16 k = 0; k<setting_maxInvestors; k++)\r\n        { \r\n            // captures an index of an open position\r\n            if (investors[k].investor==0) openPosition=k; \r\n            // captures if already a member \r\n            else if (investors[k].investor==msg.sender)\r\n            {\r\n                alreadyInvestor=true;\r\n                break;\r\n            }\r\n        }\r\n        //new Member\r\n        if (!alreadyInvestor)\r\n        {\r\n            // check that more than min is sent (variable setting)\r\n            if (msg.value<setting_minInvestment) throw;\r\n            // check that less than max is sent (variable setting)\r\n            // otherwise refund\r\n            if (msg.value>setting_maxInvestment)\r\n            {\r\n                excess=msg.value-setting_maxInvestment;\r\n  \t\tnetInvest=setting_maxInvestment;\r\n            }\r\n\t    else\r\n\t    {\r\n\t\tnetInvest=msg.value;\r\n\t    }\r\n            //members can't become a VIP member after the initial period\r\n            if (setting_maxInvestors >77 && openPosition<77) throw;\r\n            //case : array not full, record new member\r\n            else if (openPosition!=999) investors[openPosition]=Investor(msg.sender, now);\r\n            //case : array full\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n        //already a member\r\n        else\r\n        {\r\n            netInvest=msg.value;\r\n            //is already above the max balance allowed or is sending\r\n\t    // too much refuse additional invest\r\n            if (balance[msg.sender]+msg.value>setting_maxInvestment)\r\n            {\r\n                throw;\r\n            }\r\n\t    // this additionnal amount should be of at least 1/5 of \"setting_minInvestment\" (vs spam)\r\n\t    if (msg.value<setting_minInvestment/5) throw;\r\n        }\r\n\r\n        // add to balance of member and to bankroll\r\n        // 10% of initial 77 VIP members investment is allocated to\r\n        // game developement provider chosen by Rouleth DAO\r\n\t// 90% to bankroll\r\n        //share that will be allocated to game dev\r\n        uint256 developmentAllocation;\r\n        developmentAllocation=10*netInvest/100; \r\n        netInvest-=developmentAllocation;\r\n        //send game development allocation to Rouleth DAO or tech provider\r\n        if (developer.send(developmentAllocation)==false) throw;\r\n\r\n\t// Apply extra entry fee once casino has been opened to extra members\r\n\t// that fee will be shared between the VIP members and represents the increment of\r\n\t// market value of their shares in Rouleth to outsiders\r\n\t// warning if a VIP adds to its initial invest after the casino has been opened to \r\n\t// extra members he will pay have to pay this fee.\r\n        if (setting_maxInvestors>77)\r\n        {\r\n            // % of extra member's investment that rewards VIP funders\r\n            // Starts at 100%\r\n            // is set by a vote and computed when settings are changed\r\n            // to allow more investors\r\n            uint256 entryExtraCost=voted_extraInvestFeesRate*netInvest/100;\r\n            // add to VIP profit (to be shared by later call by dev.)\r\n            profitVIP += entryExtraCost;\r\n            netInvest-=entryExtraCost;\r\n        }\r\n        newInvest(msg.sender, msg.value, netInvest);//event log\r\n        balance[msg.sender]+=netInvest; //add to balance\r\n        payroll+=netInvest; //add to bankroll\r\n        updateMaxBet();\r\n        //refund potential excess\r\n        if (excess>0) \r\n        {\r\n            if (msg.sender.send(excess)==false) throw;\r\n        }\r\n    }\r\n\r\n\r\n    //Allows to transfer your DAO account to another address\r\n    //target should not be currently a DAO member of rouleth\r\n    //enter twice the address to make sure you make no mistake.\r\n    //this can't be reversed if you don't own the target account\r\n    function transferInvestorAccount(address newInvestorAccountOwner, address newInvestorAccountOwner_confirm)\r\n    noEthSent\r\n    {\r\n        if (newInvestorAccountOwner!=newInvestorAccountOwner_confirm) throw;\r\n        if (newInvestorAccountOwner==0) throw;\r\n        //retrieve investor ID\r\n        uint16 investorID=999;\r\n        for (uint16 k = 0; k<setting_maxInvestors; k++)\r\n        {\r\n\t    //new address cant be of a current investor\r\n            if (investors[k].investor==newInvestorAccountOwner) throw;\r\n\r\n\t    //retrieve investor id\r\n            if (investors[k].investor==msg.sender)\r\n            {\r\n                investorID=k;\r\n            }\r\n        }\r\n        if (investorID==999) throw; //stop if not a member\r\n\telse\r\n\t    //accept and execute change of address\r\n\t    //votes on entryFeesRate are not transfered\r\n\t    //new address should vote again\r\n\t{\r\n\t    balance[newInvestorAccountOwner]=balance[msg.sender];\r\n\t    balance[msg.sender]=0;\r\n            investors[investorID].investor=newInvestorAccountOwner;\r\n\t}\r\n    }\r\n    \r\n    //***// Withdraw function (only after lockPeriod)\r\n    // input : amount to withdraw in Wei (leave empty for full withdraw)\r\n    // if your withdraw brings your balance under the min required,\r\n    // your balance is fully withdrawn\r\n    event withdraw(address player, uint withdraw_v);\r\n    \r\n    function withdrawInvestment(uint256 amountToWithdrawInWei)\r\n    noEthSent\r\n    {\r\n\t//vs spam withdraw min 1/10 of min\r\n\tif (amountToWithdrawInWei!=0 && amountToWithdrawInWei<setting_minInvestment/10) throw;\r\n        //before withdraw, update balances with the Profit and Loss sinceChange\r\n        updateBalances();\r\n\t//check that amount requested is authorized  \r\n\tif (amountToWithdrawInWei>balance[msg.sender]) throw;\r\n        //retrieve member ID\r\n        uint16 investorID=999;\r\n        for (uint16 k = 0; k<setting_maxInvestors; k++)\r\n        {\r\n            if (investors[k].investor==msg.sender)\r\n            {\r\n                investorID=k;\r\n                break;\r\n            }\r\n        }\r\n        if (investorID==999) throw; //stop if not a member\r\n        //check if investment lock period is over\r\n        if (investors[investorID].time+setting_lockPeriod>now) throw;\r\n        //if balance left after withdraw is still above min accept partial withdraw\r\n        if (balance[msg.sender]-amountToWithdrawInWei>=setting_minInvestment && amountToWithdrawInWei!=0)\r\n        {\r\n            balance[msg.sender]-=amountToWithdrawInWei;\r\n            payroll-=amountToWithdrawInWei;\r\n            //send amount to investor (with security if transaction fails)\r\n            if (msg.sender.send(amountToWithdrawInWei)==false) throw;\r\n\t    withdraw(msg.sender, amountToWithdrawInWei);\r\n        }\r\n        else\r\n            //if amountToWithdraw=0 : user wants full withdraw\r\n            //if balance after withdraw is < min invest, withdraw all and delete member\r\n        {\r\n            //send amount to member (with security if transaction fails)\r\n            uint256 fullAmount=balance[msg.sender];\r\n            payroll-=fullAmount;\r\n            balance[msg.sender]=0;\r\n\r\n\t    //delete member\r\n            delete investors[investorID];\r\n            if (msg.sender.send(fullAmount)==false) throw;\r\n   \t    withdraw(msg.sender, fullAmount);\r\n        }\r\n        updateMaxBet();\r\n    }\r\n\r\n    //***// updates balances with Profit Losses when there is a withdraw/deposit\r\n    // can be called by dev for accounting when there are no more changes\r\n    function manualUpdateBalances_only_Dev()\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n\tupdateBalances();\r\n    }\r\n    function updateBalances() private\r\n    {\r\n        //split Profits\r\n        uint256 profitToSplit;\r\n        uint256 lossToSplit;\r\n        if (profitSinceChange==0 && lossSinceChange==0)\r\n        { return; }\r\n        \r\n        else\r\n        {\r\n            // Case : Global profit (more win than losses)\r\n            // 20% fees for game development on global profit (if profit>loss)\r\n            if (profitSinceChange>lossSinceChange)\r\n            {\r\n                profitToSplit=profitSinceChange-lossSinceChange;\r\n                uint256 developerFees=profitToSplit*20/100;\r\n                profitToSplit-=developerFees;\r\n                if (developer.send(developerFees)==false) throw;\r\n            }\r\n            else\r\n            {\r\n                lossToSplit=lossSinceChange-profitSinceChange;\r\n            }\r\n            \r\n            //share the loss and profits between all DAO members \r\n            //(proportionnaly. to each one's balance)\r\n\r\n            uint totalShared;\r\n            for (uint16 k=0; k<setting_maxInvestors; k++)\r\n            {\r\n                address inv=investors[k].investor;\r\n                if (inv==0) continue;\r\n                else\r\n                {\r\n                    if (profitToSplit!=0) \r\n                    {\r\n                        uint profitShare=(profitToSplit*balance[inv])/payroll;\r\n                        balance[inv]+=profitShare;\r\n                        totalShared+=profitShare;\r\n                    }\r\n                    else if (lossToSplit!=0) \r\n                    {\r\n                        uint lossShare=(lossToSplit*balance[inv])/payroll;\r\n                        balance[inv]-=lossShare;\r\n                        totalShared+=lossShare;\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            // update bankroll\r\n\t    // and handle potential very small left overs from integer div.\r\n            if (profitToSplit !=0) \r\n            {\r\n\t\tpayroll+=profitToSplit;\r\n\t\tbalance[developer]+=profitToSplit-totalShared;\r\n            }\r\n            else if (lossToSplit !=0) \r\n            {\r\n\t\tpayroll-=lossToSplit;\r\n\t\tbalance[developer]-=lossToSplit-totalShared;\r\n            }\r\n            profitSinceChange=0; //reset Profit;\r\n            lossSinceChange=0; //reset Loss ;\r\n        }\r\n    }\r\n    \r\n\r\n    //VIP Voting on Extra Invest Fees Rate\r\n    //mapping records 100 - vote\r\n    mapping (address=>uint) hundredminus_extraInvestFeesRate;\r\n    // max fee is 99%\r\n    // a fee of 100% indicates that the VIP has never voted.\r\n    function voteOnNewEntryFees_only_VIP(uint8 extraInvestFeesRate_0_to_99)\r\n    noEthSent\r\n    {\r\n        if (extraInvestFeesRate_0_to_99<1 || extraInvestFeesRate_0_to_99>99) throw;\r\n        hundredminus_extraInvestFeesRate[msg.sender]=100-extraInvestFeesRate_0_to_99;\r\n    }\r\n\r\n    uint256 payrollVIP;\r\n    uint256 voted_extraInvestFeesRate;\r\n    function computeResultVoteExtraInvestFeesRate() private\r\n    {\r\n        payrollVIP=0;\r\n        voted_extraInvestFeesRate=0;\r\n        //compute total payroll of the VIPs\r\n        //compute vote results among VIPs\r\n        for (uint8 k=0; k<77; k++)\r\n        {\r\n            if (investors[k].investor==0) continue;\r\n            else\r\n            {\r\n                //don't count vote if the VIP never voted\r\n                if (hundredminus_extraInvestFeesRate[investors[k].investor]==0) continue;\r\n                else\r\n                {\r\n                    payrollVIP+=balance[investors[k].investor];\r\n                    voted_extraInvestFeesRate+=hundredminus_extraInvestFeesRate[investors[k].investor]*balance[investors[k].investor];\r\n                }\r\n            }\r\n        }\r\n\t//compute final result\r\n\t    if (payrollVIP!=0)\r\n\t    {\r\n            voted_extraInvestFeesRate=100-voted_extraInvestFeesRate/payrollVIP;\r\n     \t    }\r\n    }\r\n\r\n\r\n    //Split the profits of the VIP members on extra members' contribution\r\n    uint profitVIP;\r\n    function splitProfitVIP_only_Dev()\r\n    noEthSent\r\n    onlyDeveloper\r\n    {\r\n        payrollVIP=0;\r\n        //compute total payroll of the VIPs\r\n        for (uint8 k=0; k<77; k++)\r\n        {\r\n            if (investors[k].investor==0) continue;\r\n            else\r\n            {\r\n                payrollVIP+=balance[investors[k].investor];\r\n            }\r\n        }\r\n        //split the profits of the VIP members on extra member's contribution\r\n\tuint totalSplit;\r\n        for (uint8 i=0; i<77; i++)\r\n        {\r\n            if (investors[i].investor==0) continue;\r\n            else\r\n            {\r\n\t\tuint toSplit=balance[investors[i].investor]*profitVIP/payrollVIP;\r\n                balance[investors[i].investor]+=toSplit;\r\n\t\ttotalSplit+=toSplit;\r\n            }\r\n        }\r\n\t//take care of Integer Div remainders, and add to bankroll\r\n\tbalance[developer]+=profitVIP-totalSplit;\r\n\tpayroll+=profitVIP;\r\n\t//reset var profitVIP\r\n        profitVIP=0;\r\n    }\r\n\r\n    \r\n    //INFORMATION FUNCTIONS\r\n    function checkProfitLossSinceInvestorChange() constant returns(uint profit_since_update_balances, uint loss_since_update_balances, uint profit_VIP_since_update_balances)\r\n    {\r\n        profit_since_update_balances=profitSinceChange;\r\n        loss_since_update_balances=lossSinceChange;\r\n        profit_VIP_since_update_balances=profitVIP;\t\r\n        return;\r\n    }\r\n\r\n    function checkInvestorBalance(address investor) constant returns(uint balanceInWei)\r\n    {\r\n        balanceInWei=balance[investor];\r\n        return;\r\n    }\r\n\r\n    function getInvestorList(uint index) constant returns(address investor, uint endLockPeriod)\r\n    {\r\n        investor=investors[index].investor;\r\n        endLockPeriod=investors[index].time+setting_lockPeriod;\r\n        return;\r\n    }\r\n    \r\n    function investmentEntryInfos() constant returns(uint current_max_nb_of_investors, uint investLockPeriod, uint voted_Fees_Rate_on_extra_investments)\r\n    {\r\n    \tinvestLockPeriod=setting_lockPeriod;\r\n    \tvoted_Fees_Rate_on_extra_investments=voted_extraInvestFeesRate;\r\n    \tcurrent_max_nb_of_investors=setting_maxInvestors;\r\n    \treturn;\r\n    }\r\n    \r\n    function getSettings() constant returns(uint maxBet, uint8 blockDelayBeforeSpin)\r\n    {\r\n    \tmaxBet=currentMaxGamble;\r\n    \tblockDelayBeforeSpin=blockDelay;\r\n    \treturn ;\r\n    }\r\n\r\n    function getTotalGambles() constant returns(uint _totalGambles)\r\n    {\r\n        _totalGambles=totalGambles;\r\n    \treturn ;\r\n    }\r\n    \r\n    function getPayroll() constant returns(uint payroll_at_last_update_balances)\r\n    {\r\n        payroll_at_last_update_balances=payroll;\r\n    \treturn ;\r\n    }\r\n\r\n    \r\n    function checkMyBet(address player) constant returns(Status player_status, BetTypes bettype, uint8 input, uint value, uint8 result, bool wheelspinned, bool win, uint blockNb, uint blockSpin, uint gambleID)\r\n    {\r\n        player_status=playerStatus[player];\r\n        bettype=gambles[gambleIndex[player]].betType;\r\n        input=gambles[gambleIndex[player]].input;\r\n        value=gambles[gambleIndex[player]].wager;\r\n        result=gambles[gambleIndex[player]].wheelResult;\r\n        wheelspinned=gambles[gambleIndex[player]].spinned;\r\n        win=gambles[gambleIndex[player]].win;\r\n        blockNb=gambles[gambleIndex[player]].blockNumber;\r\n        blockSpin=gambles[gambleIndex[player]].blockSpinned;\r\n    \tgambleID=gambleIndex[player];\r\n    \treturn;\r\n    }\r\n    \r\n    function getGamblesList(uint256 index) constant returns(address player, BetTypes bettype, uint8 input, uint value, uint8 result, bool wheelspinned, bool win, uint blockNb, uint blockSpin)\r\n    {\r\n        player=gambles[index].player;\r\n        bettype=gambles[index].betType;\r\n        input=gambles[index].input;\r\n        value=gambles[index].wager;\r\n        result=gambles[index].wheelResult;\r\n        wheelspinned=gambles[index].spinned;\r\n        win=gambles[index].win;\r\n    \tblockNb=gambles[index].blockNumber;\r\n        blockSpin=gambles[index].blockSpinned;\r\n    \treturn;\r\n    }\r\n\r\n} //end of contract", 
  "bytecode": "6102a06040819052600160609081526003608052600560a052600760c052600960e052600c61010052600e6101205260106101405260126101605260136101805260156101a05260176101c05260196101e052601b61020052601e61022052602061024052602261026052602461028052600d91601f919083905b8281111561009857825182600050559160200191906001019061007a565b506100b49291505b8082111561017657600081556001016100a0565b5050610634805461ffff1916604d17905562278d006106365568056bc75e2d6310000061063755680ad78ebc5ac6200000610638556000805475c800000000000000000000000000000000000000000060a860020a60ff021960a060020a60ff0219600160a060020a031990931633179290921674010000000000000000000000000000000000000000179190911617905566b1a2bc2ec500006002556706f05b59d3b2000060015560056003819055606490556129108061017a6000396000f35b509056606060405236156101485760e060020a60003504631c5d9faa81146101575780632037fcbf146101aa578063266710ca146101c45780632c6b2c92146101d55780632e0ef395146101e857806333ce7787146101fc578063402e623014610217578063580bdf3c146102215780635b7d47a9146102325780636ad50ed4146102545780636e1b6bcc146102705780636ed43eb01461042c578063750cae6a1461047a5780637c9cd7df1461048b57806385b4bb531461049f578063942385eb146104c5578063adaccd74146104d0578063adf54e0c1461054f578063b400d14914610570578063b738169c14610589578063bb84d362146105aa578063bcb3b5d2146105c3578063bfe8c1071461077f578063c7144269146107ac578063e548cf13146107dd578063e56c8552146107f6578063e8b5e51f1461080a578063f7ae94211461084f575b6108746108dc6001600061023c565b6040805160206004803580820135601f81018490048402850184019095528484526108749491936024939092918401919081908401838280828437509496505050505050506000341115610b2257610002565b6108746004356000600060006000341115610bf957610002565b6108746000341115610e3457610002565b6108de60205460215461063c545b909192565b6108746004356000341115610e5857610002565b610874600435602435600060006000341115610e9d57610002565b6108fc6008545b90565b6108746000341115610fc557610002565b6108746004356024355b600b54600090819060ff1660011415610a5a57610002565b6108de6106345461063b546106365461ffff90921691906101e3565b61090e600435600160a060020a0381166000908152600a602090815260408083205460099092528220546007805460ff9390931693928392839283928392839283928392839291811015610002578154600582026000805160206128f0833981519152015460b060020a900460ff169b50811015610002578154600582026000805160206128f0833981519152015460b860020a900460ff169a50811015610002578154600582027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68901549950811015610002578154600582027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c015460ff169850811015610002578154600582026000805160206128f0833981519152015460a060020a900460ff169750811015610002578154600582026000805160206128f0833981519152015460a860020a900460ff169650811015610002578154600582026000805160206128d08339815191520154955081101561000257600581027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b01549b9d9a9c50989a979996989597949693959392505050565b61096960043560008060228361030981101561000257506106365460028502820154600160a060020a0316935090846103098110156100025790906002020160005060010154019050915091565b6108746000341115610ff057610002565b610874600435600034111561101857610002565b60005460408051600654815260a060020a90920460ff1660208301528051918290030190f35b6108fc601f5461021e565b61098f60043560408051602081810183526000808352600160a060020a0385168152600c8252835190849020805460026001821615610100026000190190911604601f810184900484028301840190955284825292939092918301828280156110745780601f1061104957610100808354040283529160200191611074565b610874600435602435600b54600090819060ff166001141561108257610002565b610874600435600b5460ff166001141561111d57610002565b610874600435602435600b54600090819060ff166001141561119e57610002565b6108746000600060006000600034111561123957610002565b6109fd60043560006000600060006000600060006000600060076000508a8154811015610002578154828452600582026000805160206128f08339815191520154600160a060020a03169b50811015610002579060005260206000209060050201600050546007805460b060020a90920460ff169950908b90811015610002579060005260206000209060050201600050546007805460b860020a90920460ff169850908b9081101561000257906000526020600020906005020160005060078054600192909201549750908b90811015610002579060005260206000209060050201600050600780546004929092015460ff169650908b90811015610002579060005260206000209060050201600050546007805460a060020a90920460ff169550908b90811015610002579060005260206000209060050201600050546007805460a860020a90920460ff169450908b908110156100025790600052602060002090600502016000506002015460078054919350908b90811015610002575050506005989098027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b01549698959794969395929491939092565b610874600435602435604435610bbf83838360035b600b54600090819060ff1660011415611c4457610002565b61087460043560243560443560643560843560a43560c43560e435610104356101243560003411156113d857610002565b610874600435602435604435610bbf8383836004610794565b610874600435600034111561158d57610002565b61087460006000600060006000600060006115d85b600060006000600060006000600060006020600050546000148015610845575060215481145b15611a7e57611b19565b6108fc600435600160a060020a0381166000908152610635602052604090205461107d565b005b60408051600160a060020a03331681526020810183905281517ff3fef3a3f44f9c277339b67d54f015748bd8d6b77a985b0ab6e71126b018c34a929181900390910190a15b610b1c5b600154600554601f54602390910290041115611c31576001546006555b565b60408051938452602084019290925282820152519081900360600190f35b60408051918252519081900360200190f35b604080519a8b5260208b019990995260ff9788168a8a015260608a019690965293909516608088015290151560a0870152151560c086015260e085019290925261010084019190915261012083015251908190036101400190f35b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156109ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051600160a060020a039a909a168a5260208a019890985260ff968716898901526060890195909552929094166080870152151560a086015291151560c085015260e084019190915261010083015251908190036101200190f35b600754600014801590610a96575060078054600019810190811015610002576000919091526005026000805160206128d0833981519152015443145b15610aa957600480546001019055610aaf565b60006004555b60035460045410610abf57610002565b8315610acc575060010160005b8215610ada57506001908101905b60ff8216600114610aea57610002565b610b1c6001825b600160a060020a0333166000908152600a602052604081205460ff1681146118815761188133611592565b50505050565b6002815110158015610b365750601e815111155b15610bc25780600c600050600033600160a060020a031681526020019081526020016000206000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bc557805160ff19168380011785555b50610bbf9291505b80821115610bf55760008155600101610bab565b50505b50565b82800160010185558215610ba3579182015b82811115610ba3578251826000505591602001919060010190610bd7565b5090565b83600014158015610c10575061063754600a900484105b15610c1a57610002565b610c2261081f565b600160a060020a03331660009081526106356020526040902054841115610c4857610002565b6103e79250600091505b6106345461ffff9081169083161015610c9a57600160a060020a033316602261ffff8416610309811015610002576002020154600160a060020a03161415610cad5781925082505b8261ffff166103e71415610cb957610002565b60019190910190610c52565b610636544290602261ffff8616610309811015610002576002020160005060010154011115610ce757610002565b61063754600160a060020a0333166000908152610635602052604090205485900310801590610d17575083600014155b15610d6557600160a060020a0333166000818152610635602052604080822080548890039055601f8054889003905551869082818181858883f11515909214159250610deb91505057610002565b50600160a060020a0333166000908152610635602052604081208054601f80548290039055919055602261ffff841661030981101561000257600202016000508054600160a060020a03191681556000600191909101819055604051600160a060020a0333169190839082818181858883f1151590921415925061087691505057610002565b60408051600160a060020a03331681526020810186905281517ff3fef3a3f44f9c277339b67d54f015748bd8d6b77a985b0ab6e71126b018c34a929181900390910190a16108bb565b600054600160a060020a039081163390911614610e5057610002565b6108dc61081f565b60018160ff161080610e6d575060638160ff16115b15610e7757610002565b600160a060020a033316600090815261063960205260409020606482900360ff16905550565b600160a060020a0384811690841614610eb557610002565b83600160a060020a031660001415610ecc57610002565b506103e7905060005b6106345461ffff9081169082161015610f1c57600160a060020a038416602261ffff8316610309811015610002576002020154600160a060020a03161415610f2f57610002565b8161ffff166103e71415610f6a57610002565b600160a060020a033316602261ffff8316610309811015610002576002020154600160a060020a03161415610f62579050805b600101610ed5565b600160a060020a03338116600081815261063560205260408082208054948916835290822093909355908152905583602261ffff841661030981101561000257600202018054600160a060020a031916909117905550505050565b600054600160a060020a039081163390911614610fe157610002565b600b805460ff19166001179055565b600054600160a060020a03908116339091161461100c57610002565b600b805460ff19169055565b600054600160a060020a03908116339091161461103457610002565b60008054600160a060020a0319168217905550565b820191906000526020600020905b81548152906001019060200180831161105757829003601f168201915b50939450505050505b919050565b6007546000148015906110be575060078054600019810190811015610002576000919091526005026000805160206128d0833981519152015443145b156110d1576004805460010190556110d7565b60006004555b600354600454106110e757610002565b83156110f4575060010160005b821561110257506001908101905b60ff821660011461111257610002565b610b1c600582610af1565b600754600014801590611159575060078054600019810190811015610002576000919091526005026000805160206128d0833981519152015443145b1561116c57600480546001019055611172565b60006004555b6003546004541061118257610002565b60248160ff16111561119357610002565b610bc2600082610af1565b6007546000148015906111da575060078054600019810190811015610002576000919091526005026000805160206128d0833981519152015443145b156111ed576004805460010190556111f3565b60006004555b6003546004541061120357610002565b8215611210575060010160005b831561121e57506001908101905b60ff821660011461122e57610002565b610b1c600282610af1565b600054600160a060020a03908116339091161461125557610002565b600061063a81905593505b604d8460ff16101561129757602260ff8516610309811015610002576002020154600160a060020a0316600014156112d35761130e565b600091505b604d8260ff16101561131a57602260ff8316610309811015610002576002020154600160a060020a031660001415611355576113cc565b6106356000602260ff8716610309811015610002576002020154600160a060020a03168152602091909152604090205461063a805490910190555b60019390930192611260565b61063c805460008054600160a060020a0316815261063560205260408120805492879003909201909155601f80548354019055905550505050565b61063a5461063c546106356000602260ff871661030981101561000257600202810154600160a060020a0316825260208390526040822054939093029390930493508392909160ff8616610309811015610002576002020154600160a060020a031681526040902080549290920190915550918201915b6001919091019061129c565b600054600160a060020a0390811633909116146113f457610002565b60648a101561140257610002565b60058a905560038990558787101561141957610002565b6001879055600088101561142c57610002565b60028890556106345461ffff80881691161480159061144f57506007546161a890105b1561145957610002565b6106345461ffff9081169087161080611477575061030961ffff8716115b1561148157610002565b610634805461ffff1916871790556114d8600061063a81905561063b8190555b604d8160ff161015611cf357602260ff8216610309811015610002576002020154600160a060020a031660001415611d1357611de7565b848410156114e557610002565b610637859055610638849055610636546301da9c0090111561150657610002565b6106368390556000805474ff0000000000000000000000000000000000000000191660a060020a8481029190911791829055900460ff9081166014018116908216101561155257610002565b6000805475ff000000000000000000000000000000000000000000191660a860020a83021790556115816108bf565b50505050505050505050565b610bc2815b600060006000600084600160a060020a0316600014156115b0573394505b600160a060020a0385166000908152600a602052604090205460ff16600114611def57610002565b6103e79450600092505b6106345461ffff908116908416101561166257602261ffff8416610309811015610002576002020154600160a060020a03166000141561162e5782945084505b600192909201916115e2565b600160a060020a033316602261ffff8516610309811015610002576002020154600160a060020a0316141561162257600193505b83151561167957610637543410156116a757610002565b61063854600160a060020a033316600090815261063560205260409020543498508801111561178557610002565b610638543411156116c3576106385496503487900395506116c7565b3496505b61063454604d61ffff9091161180156116e45750604d8561ffff16105b156116ee57610002565b6103e761ffff8616146117805760408051808201909152338152426020820152602261ffff8716610309811015610002576002029081018054600160a060020a031916331790554260239190910155505b600080546040516064600a8b0204998a9003999450600160a060020a03919091169190849082818181858883f1151590921415925061179991505057610002565b610002565b610637546005900434101561173f57610002565b61063454604d61ffff90911611156117c9575061063b5461063c8054606492890292909204918201905595869003955b60408051600160a060020a033316815234602082015280820189905290517f7acd04125f685c90097481d254317c7cd6b69a6c8eb0d0eb375f6a98ad2687329181900360600190a1600160a060020a033316600090815261063560205260409020805488019055601f8054880190556118406108bf565b600086111561187857604051600160a060020a03331690600090889082818181858883f1151590921415925061187891505057610002565b50505050505050565b600160a060020a0333166000908152600a60209081526040808320805460ff1916600190811790915560075460099093529220556008805490910190556118d360025460009034101561228757610002565b9050600760005080548060010182818154818355818115116119645760008390526119649060059081026000805160206128f0833981519152908101918402015b80821115610bf557805477ffffffffffffffffffffffffffffffffffffffffffffffff1916815560006001820181905560028201819055600382015560048101805460ff19169055600501611914565b5050506000928352506040805160208085206101208301845233808452918301869052928201859052606082018890526080820187905260a082018690524360c0830181905260e083018690526025610100939093018390526005949094029092018054600160a060020a03191690921776ffffff0000000000000000000000000000000000000000191660b060020a88021777ff0000000000000000000000000000000000000000000000191660b860020a87021782556001820185905560028201929092556003810192909255600491909101805460ff1916909117905534811015610bbf57604051600160a060020a03331690600090348490039082818181858883f11515909214159250610bbf91505057610002565b602054602154901115611b2357602054602154600080546040516064939094036014810293909304928390039b50919850600160a060020a039190911691889082818181858883f11515909214159250611b7491505057610002565b60008714611b0e57601f8054889003905560008054600160a060020a03168152610635602052604090208054868903900390555b600060208190556021555b5050505050505050565b6020546021540396505b600093505b6106345461ffff9081169085161015611b7957602261ffff8516610309811015610002576002020154600160a060020a031692506000831415611baf57611c25565b611b2d565b60008814611ada57601f80548901905560008054600160a060020a03168152610635602052604090208054868a03019055611b0e565b60008814611bec57601f54600160a060020a03841660009081526106356020526040902080548a8102929092049182019055948501949150611c25565b60008714611c255750601f54600160a060020a038316600090815261063560205260409020805480890292909204918290039055938401935b60019390930192611b32565b600554601f546023919091029004600655565b600754600014801590611c80575060078054600019810190811015610002576000919091526005026000805160206128d0833981519152015443145b15611c9357600480546001019055611c99565b60006004555b60035460045410611ca957610002565b8515611cb6575060010160005b8415611cc457506001908101905b8315611cd1575060010160025b60ff8216600114611ce157610002565b611ceb8382610af1565b505050505050565b61063a54600014610bc25761063a5461063b805491909104606403905550565b6106396000602260ff8416610309811015610002576002020154600160a060020a0316815260209190915260408120541415611d4e57611de7565b6106356000602260ff841661030981101561000257600202810154600160a060020a03168252602083905261063a8054604084205401905560ff841661030981101561000257600202810154600160a060020a0316825260408220549250610639919060ff8516610309811015610002576002020154600160a060020a03168152602091909152604090205461063b8054919092020190555b6001016114a1565b600160a060020a03851660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460a060020a900460ff16151560011415611e4957610002565b600160a060020a0385166000908152600960205260409020546007805490919081101561000257600091825290546005919091026000805160206128d08339815191520154945060a060020a900460ff1684014311611ea757610002565b60005460a860020a900460ff168401431115611ece57611eed8560ff600060018180611fe9565b6000805460a060020a900460ff168501409250821415611ef457610002565b5050505050565b5060408051600160a060020a0386166c01000000000000000000000000028152601481018390529051908190036034019020602581069250611eed83868484600160a060020a0383166000908152600960205260078054604083205490811015610002579082526005026000805160206128f0833981519152015460b060020a900460ff1690811415612357576123e485858585600160a060020a03831660009081526009602052604081205460078054909190811015610002579082526005026000805160206128f0833981519152015460ff86811660b860020a909204161415611fde575060015b611eed848683602487875b600160a060020a0386166000908152600a60209081526040808320805460ff191690556009909152600780549183205483928992919081101561000257604084206005919091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c01805460ff191693909317909255600160a060020a038a168352805491546001928110156100025760009182526005026000805160206128f0833981519152019050805460a060020a9290920274ff00000000000000000000000000000000000000001992909216919091179055600160a060020a038816600090815260096020526040902054600780544392908110156100025760009182526005026000805160206128f083398151915201905060030155600160a060020a03881660009081526009602052604090205460078054909190811015610002579082526005027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6890154915085156122a257600160a060020a03881660009081526009602052604090205460078054600192908110156100025760009182526005026000805160206128f0833981519152019050805460a860020a9290920275ff00000000000000000000000000000000000000000019929092169190911790555060218054600019860160ff9081168402918201909255600160a060020a038916600081815260096020908152604091829020548251938452948b1690830152818101839052606082018790526080820186905260a0820193909352915190917f2d405b4396de541fd8b7448de00c152385ac44ad14f9eb281de4262f1243a735919081900360c00190a1604051600160a060020a038916906000908385019082818181858883f1151590921415925061235291505057610002565b60065434111561229a575060065461229d565b50345b61021e565b600160a060020a03881660008181526009602090815260409182902054825193845260ff8b1691840191909152600019850183830152606083018790526080830186905260a0830152517f48156d9ccd5f1a9d70cfcbc377888e2b2b5d40f87ce4e3d83708a065a50743d99181900360c00190a1604051602080548401600019019055600160a060020a0389169060009060019082818181858883f11515909214159250611b1991505057610002565b611b19565b60028114156123ec576123e485858585600160a060020a03831660009081526009602052604081205460078054909190811015610002579082526005026000805160206128f08339815191520154600260ff87811691909106811660b860020a909204161480156123cc57508460ff16600014155b156123d5575060015b611eed84868360028787611fe9565b611eed6108bf565b600181141561250b576123e4858585856000600060005b60128260ff161015612432578660ff16600d6000508360ff16601281101561000257015414156128c457600192505b8660ff166000141580156124f35750600160a060020a038616600090815260096020526040902054600780549091908110156100025760009182526005026000805160206128f0833981519152015460b860020a900460ff161480156124955750825b806124f35750600160a060020a03861660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff1660011480156124f3575082155b156124fc575060015b61187886888360028989611fe9565b60058114156125fb576123e48585858560008460ff166000141580156123cc575060138560ff161080156125825750600160a060020a03841681526009602052604081205460078054909190811015610002579082526005026000805160206128f0833981519152015460b860020a900460ff1681145b806123cc575060128560ff161180156123cc5750600160a060020a03841660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff16600114156123d557506001611eed84868360028787611fe9565b600381141561275f576123e48585858560008460ff166000141580156127475750600d8560ff161080156126725750600160a060020a03841681526009602052604081205460078054909190811015610002579082526005026000805160206128f0833981519152015460b860020a900460ff1681145b806126e45750600c8560ff1611801561268e575060198560ff16105b80156126e45750600160a060020a03841660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff166001145b80612747575060188560ff161180156127475750600160a060020a03841660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff166002145b15612750575060015b611eed84868360038787611fe9565b60048114156123e4576123e48585858560008460ff166000141580156127475750600160a060020a03841681526009602052604081205460078054909190811015610002579082526005026000805160206128f0833981519152015460b860020a900460ff16811480156127dc575060038560ff160660ff166001145b806128455750600160a060020a03841660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff166001148015612845575060038560ff160660ff166002145b806127475750600160a060020a03841660009081526009602052604090205460078054909190811015610002576000919091526005026000805160206128f0833981519152015460b860020a900460ff166002148015612747575060038560ff160660ff166000141561275057506001611eed84868360038787611fe9565b6001919091019061240356a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68aa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688", 
  "address": "0x18a672e11d637fffadccc99b152f4895da069601", 
  "balance": "9,401<b>.</b>25949999514259373 Ether"
 }, 
 "0xa00fa22499478cc37beb45021a1f1c9f826f72e1": {
  "name": "PosRewards", 
  "transactions": "20692", 
  "source": "contract Ambi {\r\n    function getNodeAddress(bytes32) constant returns (address);\r\n    function addNode(bytes32, address) external returns (bool);\r\n    function hasRelation(bytes32, bytes32, address) constant returns (bool);\r\n}\r\n\r\ncontract AmbiEnabled {\r\n    Ambi ambiC;\r\n    bytes32 public name;\r\n\r\n    modifier checkAccess(bytes32 _role) {\r\n        if(address(ambiC) != 0x0 && ambiC.hasRelation(name, _role, msg.sender)){\r\n            _\r\n        }\r\n    }\r\n    \r\n    function getAddress(bytes32 _name) returns (address) {\r\n        return ambiC.getNodeAddress(_name);\r\n    }\r\n\r\n    function setAmbiAddress(address _ambi, bytes32 _name) returns (bool){\r\n        if(address(ambiC) != 0x0){\r\n            return false;\r\n        }\r\n        Ambi ambiContract = Ambi(_ambi);\r\n        if(ambiContract.getNodeAddress(_name)!=address(this)) {\r\n            bool isNode = ambiContract.addNode(_name, address(this));\r\n            if (!isNode){\r\n                return false;\r\n            }   \r\n        }\r\n        name = _name;\r\n        ambiC = ambiContract;\r\n        return true;\r\n    }\r\n\r\n    function remove(){\r\n        if(msg.sender == address(ambiC)){\r\n            suicide(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ElcoinDb {\r\n    function getBalance(address addr) constant returns(uint balance);\r\n}\r\n\r\ncontract ElcoinInterface {\r\n    function rewardTo(address _to, uint _amount) returns (bool);\r\n}\r\n\r\ncontract PosRewards is AmbiEnabled {\r\n\r\n    event Reward(address indexed beneficiary, uint indexed cycle, uint value, uint position);\r\n\r\n    uint public cycleLength; // PoS will be ready to send each cycleLength seconds\r\n    uint public startTime;   // starting at startTime\r\n    uint public cycleLimit;  // and will stop after cycleLimit cycles pass\r\n    uint public minimalRewardedBalance; // but only those accounts having balance\r\n                             // >= minimalRewardedBalance will get reward\r\n    uint[] public bannedCycles;\r\n\r\n    enum RewardStatuses { Unsent, Sent, TooSmallToSend }\r\n\r\n    struct Account {\r\n        address recipient;\r\n        RewardStatuses status;\r\n    }\r\n\r\n    // cycleNumber => (address => minimalBalance)\r\n    mapping (uint => mapping (address => int)) public accountsBalances;\r\n    // cycleNumber => Account[]\r\n    mapping (uint => Account[]) public accountsUsed;\r\n\r\n    function PosRewards() {\r\n        cycleLength = 864000; // 864000 seconds = 10 days, 14400 = 4 hours\r\n        cycleLimit = 255; // that's 9 + 9 + 9 + 9 + 219, see getRate() for info\r\n        minimalRewardedBalance = 1000000; // 1 coin\r\n        startTime = now;\r\n    }\r\n\r\n    // USE THIS FUNCTION ONLY IN NEW CONTRACT, IT WILL CORRUPT ALREADY COLLECTED DATA!\r\n    // startTime should be set to the time when PoS starts (on Dec 17, probably block 705000 or so).\r\n    // It should be at 12:00 Moscow time, this would be the start of all PoS cycles.\r\n    function setStartTime(uint _startTime) checkAccess(\"owner\") {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    // this allows to end PoS before 2550 days pass or to extend it further\r\n    function setCycleLimit(uint _cycleLimit) checkAccess(\"owner\") {\r\n        cycleLimit = _cycleLimit;\r\n    }\r\n\r\n    // this allows to disable PoS sending for some of the cycles in case we\r\n    // need to send custom PoS. This will be 100% used on first deploy.\r\n    function setBannedCycles(uint[] _cycles) checkAccess(\"owner\") {\r\n        bannedCycles = _cycles;\r\n    }\r\n\r\n    // set to 0 to reward everyone\r\n    function setMinimalRewardedBalance(uint _balance) checkAccess(\"owner\") {\r\n        minimalRewardedBalance = _balance;\r\n    }\r\n\r\n    function kill() checkAccess(\"owner\") {\r\n        suicide(msg.sender); // kills this contract and sends remaining funds back to msg.sender\r\n    }\r\n\r\n    // First 90 days 50% yearly\r\n    // Next 90 days 40%\r\n    // Next 90 days 30%\r\n    // Next 90 days 20%\r\n    // Next 2190 days 10%\r\n    function getRate(uint cycle) constant returns (uint) {\r\n        if (cycle <= 9) {\r\n            return 50;\r\n        }\r\n        if (cycle <= 18) {\r\n            return 40;\r\n        }\r\n        if (cycle <= 27) {\r\n            return 30;\r\n        }\r\n        if (cycle <= 35) { // not 36 because 36 is elDay\r\n            return 20;\r\n        }\r\n        if (cycle == 36) {\r\n            return 40;\r\n        }\r\n        if (cycle <= cycleLimit) {\r\n            if (cycle % 36 == 0) {\r\n                // Every 360th day, reward amounts double.\r\n                // The elDay lasts precisely 24 hours, and after that, reward amounts revert to their original values.\r\n                return 20;\r\n            }\r\n\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Cycle numeration starts from 1, 0 will be handled as not valid cycle\r\n    function currentCycle() constant returns (uint) {\r\n        if (startTime > now) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + ((now - startTime) / cycleLength);\r\n    }\r\n\r\n    function _isCycleValid(uint _cycle) constant internal returns (bool) {\r\n        if (_cycle >= currentCycle() || _cycle == 0) {\r\n            return false;\r\n        }\r\n        for (uint i; i<bannedCycles.length; i++) {\r\n            if (bannedCycles[i] == _cycle) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Returns how much Elcoin would be granted for user's minimal balance X in cycle Y\r\n    // The function is optimized to work with whole integer arithmetics\r\n    function getInterest(uint amount, uint cycle) constant returns (uint) {\r\n        return (amount * getRate(cycle)) / 3650;\r\n    }\r\n\r\n    // This function logs the balances after the transfer to be used in further calculations\r\n    function transfer(address _from, address _to) checkAccess(\"elcoin\") {\r\n        if (startTime == 0) {\r\n            return; // the easy way to disable PoS\r\n        }\r\n\r\n        _storeBalanceRecord(_from);\r\n        _storeBalanceRecord(_to);\r\n    }\r\n\r\n    function _storeBalanceRecord(address _addr) internal {\r\n        ElcoinDb db = ElcoinDb(getAddress(\"elcoinDb\"));\r\n        uint cycle = currentCycle();\r\n\r\n        if (cycle > cycleLimit) {\r\n            return;\r\n        }\r\n\r\n        int balance = int(db.getBalance(_addr));\r\n        bool accountNotUsedInCycle = (accountsBalances[cycle][_addr] == 0);\r\n\r\n        // We'll use -1 to mark accounts that have zero balance because\r\n        // mappings return 0 for unexisting records and there is no way to\r\n        // differ them without additional data structure\r\n        if (accountsBalances[cycle][_addr] != -1 && (accountNotUsedInCycle || accountsBalances[cycle][_addr] > balance)) {\r\n            if (balance == 0) {\r\n                balance = -1;\r\n            }\r\n            accountsBalances[cycle][_addr] = balance;\r\n\r\n            if (accountNotUsedInCycle) {\r\n                // do this only once for each account in each cycle\r\n                accountsUsed[cycle].push(Account(_addr, RewardStatuses.Unsent));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get minimal balance for address in some cycle\r\n    function getMinimalBalance(uint _cycle, address _addr) constant returns(int) {\r\n        int balance = accountsBalances[_cycle][_addr];\r\n        if (balance == -1) {\r\n            balance = 0;\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    // Get information from accountsUsed structure\r\n    function getAccountInfo(uint _cycle, uint _position) constant returns(address, RewardStatuses, int) {\r\n        return (\r\n            accountsUsed[_cycle][_position].recipient,\r\n            accountsUsed[_cycle][_position].status,\r\n            accountsBalances[_cycle][accountsUsed[_cycle][_position].recipient]\r\n          );\r\n    }\r\n\r\n    // Get information from accountsUsed structure\r\n    function getRewardsCount(uint _cycle) constant returns(uint) {\r\n        return accountsUsed[_cycle].length;\r\n    }\r\n\r\n    function sendReward(uint _cycle, uint _position) returns(bool) {\r\n        // Check that parameters are in valid ranges\r\n        if (!_isCycleValid(_cycle) || _position >= accountsUsed[_cycle].length) {\r\n            return false;\r\n        }\r\n\r\n        // Check that this reward was not sent\r\n        Account claimant = accountsUsed[_cycle][_position];\r\n        if (claimant.status != RewardStatuses.Unsent) {\r\n            return false;\r\n        }\r\n\r\n        // Check that this reward passes the conditions\r\n        int minimalAccountBalance = accountsBalances[_cycle][claimant.recipient];\r\n        if (minimalAccountBalance < int(minimalRewardedBalance)) {\r\n            claimant.status = RewardStatuses.TooSmallToSend;\r\n            return false;\r\n        }\r\n\r\n        uint rewardAmount = getInterest(uint(minimalAccountBalance), _cycle);\r\n\r\n        // We are ready to send the reward\r\n        ElcoinInterface elcoin = ElcoinInterface(getAddress(\"elcoin\"));\r\n        bool result = elcoin.rewardTo(claimant.recipient, rewardAmount);\r\n        if (result) {\r\n            Reward(claimant.recipient, _cycle, rewardAmount, _position);\r\n            claimant.status = RewardStatuses.Sent;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", 
  "bytecode": "6060604052620d2f0060025560ff600455620f424060055542600355610f54806100296000396000f36060604052361561011c5760e060020a600035046306fdde03811461011e57806321f8a7211461012757806335930e13146101a057806337cc7cc0146102445780633e0a322d1461028157806341c0e1b514610320578063562557f7146103c057806357764094146104075780635af73f3f146104205780635c89c10d14610460578063728af7ec146105965780637332b520146105ae57806376d438b0146105c957806378e97925146105ee5780637948f523146105f7578063986dcd4d1461061c578063a7f43779146106bb578063b263f638146106e2578063ba45b0b8146106eb578063bab2f5521461079c578063d183434d146107b4578063eac471a0146107d9578063efad6df3146107e2578063fa7d68f1146107eb575b005b6108a960015481565b6108bb6004355b60408051600080547f2ade6c360000000000000000000000000000000000000000000000000000000083526004830185905292519092600160a060020a031691632ade6c36916024828101926020929190829003018187876161da5a03f1156100025750506040515191506105c49050565b61011c6004356000805460d960020a6437bbb732b90291600160a060020a0391909116148015906102345750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561023f5760058290555b505b50565b6108a960043560068054829081101561000257506000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015481565b61011c6004356000805460d960020a6437bbb732b90291600160a060020a0391909116148015906103155750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561023f5750600355565b6000805461011c9160d960020a6437bbb732b90291600160a060020a0316148015906103af5750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b156102415733600160a060020a0316ff5b6108d860043560243560086020526000828152604090208054829081101561000257506000908152602090200154600160a060020a038116915060a060020a900460ff1682565b6108a96004355b600060098211610929575060326105c4565b6108a96004356024356000828152600760209081526040808320600160a060020a03851684529091528120546000198114156104595750805b9392505050565b6040805160048035808201356020818102808601820190965281855261011c959394602494909385019291829190850190849080828437509496505050505050506000805460d960020a6437bbb732b90291600160a060020a03919091161480159061052f5750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561023f5760068054835180835560008390527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f91820191602086018215610997579160200282015b82811115610997578251826000505591602001919060010190610578565b6108a96004356024355b6000610e426109bd8361040e565b6108a96004356000818152600860205260409020545b919050565b6108a9600435602435600060006000600060006000610abb8860006000610cfc6107a0565b6108a960035481565b6108a96004356024356000805481908190600160a060020a03168114610bca57610bc2565b61011c6004356000805460d960020a6437bbb732b90291600160a060020a0391909116148015906106b05750604080516000805460015460e460020a630a1add5102845260048401526024830185905233600160a060020a039081166044850152935193169263a1add5109260648181019360209392839003909101908290876161da5a03f1156100025750506040515190505b1561023f5750600455565b61011c600054600160a060020a039081163390911614156109275733600160a060020a0316ff5b6108a960055481565b61011c6004356024356000805460d160020a6532b631b7b4b70291600160a060020a0391909116148015906107865750600080546001546040805160e460020a630a1add5102815260048101929092526024820185905233600160a060020a039081166044840152905192169263a1add5109260648381019360209390839003909101908290876161da5a03f1156100025750506040515190505b15610cd85760035460001415610c99575061023f565b6108a95b6000426003600050541115610cdd57610cee565b6007602090815260043560009081526040808220909252602435815220546108a99081565b6108a960025481565b6108a960045481565b6108fe600435602435600082815260086020526040812080548291829185908110156100025750805481835260208320860154878452600160a060020a03169190869081101561000257906000526020600020900160005054600087815260076020908152604080832060089092528220805460a060020a90940460ff16939192918990811015610002579082526020822001815054600160a060020a03168152602081019190915260400160002054919450925090509250925092565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60408051600160a060020a03949094168452602084019290925282820152519081900360600190f35b565b60128211610939575060286105c4565b601b82116109495750601e6105c4565b60238211610959575060146105c4565b816024141561096a575060286105c4565b600454821161098757602482066000141561098f575060146105c4565b5060006105c4565b50600a6105c4565b506109b39291505b808211156109b9576000815560010161099f565b50505050565b5090565b840204905092915050565b6040805187547ff8b71c64000000000000000000000000000000000000000000000000000000008252600160a060020a0390811660048301526024820187905291519294509084169163f8b71c649160448181019260209290919082900301816000876161da5a03f115610002575050604051519150508015610aab57604080518654858252602082018a905282518b93600160a060020a0392909216927fe417c38cb96e748006d0ef1a56fec0de428abac103b6644bc30c745f54f5434592908290030190a360018560000160146101000a81548160ff021916908302179055505b600195505b505050505092915050565b1580610ad557506000888152600860205260409020548710155b15610ae35760009550610ab0565b60008881526008602052604090208054889081101561000257506000908152602081208801805490965060a060020a900460ff1614610b255760009550610ab0565b60008881526007602090815260408083208854600160a060020a03168452909152902054600554909450841215610b7a5760028560000160146101000a81548160ff0219169083021790555060009550610ab0565b610b8484896105a0565b92506109c860d160020a6532b631b7b4b70261012e565b60018481556000805473ffffffffffffffffffffffffffffffffffffffff19168417905592505b505092915050565b84915030600160a060020a031682600160a060020a0316632ade6c36866040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f11561000257505060405151600160a060020a03169091149050610b9b5781600160a060020a0316637684937685306040518360e060020a0281526004018083815260200182600160a060020a03168152602001925050506020604051808303816000876161da5a03f11561000257505060405151915050801515610b9b5760009250610bc2565b610ccf835b6000600060006000610d6e7f656c636f696e446200000000000000000000000000000000000000000000000061012e565b610cd882610c9e565b505050565b506003546002544291909103046001015b90565b600191505b50919050565b83101580610d0a5750826000145b15610d1c5760009150610cf6565b6001015b600654811015610cf157826006600050828154811015610002576000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01541415610d185760009150610cf6565b9350610d786107a0565b600454909350831115610d8a57610f4d565b83600160a060020a031663f8b2cb4f866040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750506040805151600086815260076020908152838220600160a060020a038b16835290529182205490945090811492506000191480159150610e5157508080610e5157508160076000506000858152602001908152602001600020600050600087600160a060020a0316815260200190815260200160002060005054135b15610f4d578160001415610e655760001991505b6000838152600760209081526040808320600160a060020a038916845290915290208290558015610f4d5760008381526008602052604090208054600181018083558281838015829011610ef457818360005260206000209182019101610ef491905b808211156109b957805474ffffffffffffffffffffffffffffffffffffffffff19168155600101610ec8565b5050506000928352506020808320604080518082019091528981529091019290925201805473ffffffffffffffffffffffffffffffffffffffff1916861774ff0000000000000000000000000000000000000000191690555b505050505056", 
  "address": "0xa00fa22499478cc37beb45021a1f1c9f826f72e1", 
  "balance": "0 Ether"
 }, 
 "0x888666ca69e0f178ded6d75b5726cee99a87d698": {
  "name": "IconomiToken", 
  "transactions": "7109", 
  "source": "pragma solidity ^0.4.0;\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract IconomiToken {\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  event BlockLockSet(uint256 _value);\r\n  event NewOwner(address _newOwner);\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier blockLock(address _sender) {\r\n    if (!isLocked() || _sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier checkIfToContract(address _to) {\r\n    if(_to != address(this))  {\r\n      _;\r\n    }\r\n  }\r\n\r\n  uint256 public totalSupply;\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  string public version = '0.0.1';\r\n  address public owner;\r\n  uint256 public lockedUntilBlock;\r\n\r\n  function IconomiToken(\r\n    uint256 _initialAmount,\r\n    string _tokenName,\r\n    uint8 _decimalUnits,\r\n    string _tokenSymbol,\r\n    uint256 _lockedUntilBlock\r\n    ) {\r\n\r\n    balances[msg.sender] = _initialAmount;\r\n    totalSupply = _initialAmount;\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) blockLock(msg.sender) checkIfToContract(_to) returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) blockLock(_from) checkIfToContract(_to) returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function setBlockLock(uint256 _lockedUntilBlock) onlyOwner returns (bool success) {\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }\r\n\r\n  function isLocked() constant returns (bool success) {\r\n    return lockedUntilBlock > block.number;\r\n  }\r\n\r\n  function replaceOwner(address _newOwner) onlyOwner returns (bool success) {\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n}", 
  "bytecode": "60a060405260056060527f302e302e310000000000000000000000000000000000000000000000000000006080526004805460008290527f302e302e3100000000000000000000000000000000000000000000000000000a82556100b5907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b602060026001841615610100026000190190931692909204601f01919091048101905b8082111561018a57600081556001016100a1565b5050604051610b2b380380610b2b83398101604052808051906020019091908051820191906020018051906020019091908051820191906020018051906020019091905050600160a060020a033316600090815260076020908152604082208790558682558551600180549381905292600281851615610100026000190190911604601f9081018390047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69081019390919089019083901061018e57805160ff19168380011785555b506101be9291506100a1565b5090565b8280016001018555821561017e579182015b8281111561017e5782518260005055916020019190600101906101a0565b50506002805460ff191684178155825160038054600082905290927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b60206001841615610100026000190190931691909104601f9081018390048201939287019083901061023f57805160ff19168380011785555b5061026f9291506100a1565b82800160010185558215610233579182015b82811115610233578251826000505591602001919060010190610251565b5050600681905560058054600160a060020a0319163317905550505050506108908061029b6000396000f3606060405236156100c45760e060020a600035046306fdde0381146100c9578063095ea7b31461012b57806318160ddd1461013e57806323b872dd1461014c578063313ce5671461016d578063366a68dc1461017e57806354fd4d50146101e457806370a08231146102475780638da5cb5b1461027157806395d89b4114610288578063a39a45b7146102eb578063a4e2d63414610374578063a9059cbb14610381578063cae9ca511461039a578063d8162db714610460578063dd62ed3e1461046e575b610002565b346100025760408051600180546020600282841615610100026000190190921691909104601f81018290048202840182019094528383526104a793908301828280156105995780601f1061056e57610100808354040283529160200191610599565b34610002576105156004356024356103f4565b346100025761052960005481565b34610002576105156004356024356044356000836105a15b60065443901190565b346100025761053b60025460ff1681565b3461000257610515600435600554600090600160a060020a0390811633909116141561026c5760068290556040805183815290517f6c04066f6ede40cc1642c211ba9d18f1a096ccc84fb8d11be28ea6c3c6f68b369181900360200190a150600161026c565b34610002576040805160048054602060026001831615610100026000190190921691909104601f81018290048202840182019094528383526104a793908301828280156105995780601f1061056e57610100808354040283529160200191610599565b3461000257610529600435600160a060020a0381166000908152600760205260409020545b919050565b3461000257610551600554600160a060020a031681565b34610002576040805160038054602060026001831615610100026000190190921691909104601f81018290048202840182019094528383526104a793908301828280156105995780601f1061056e57610100808354040283529160200191610599565b3461000257610515600435600554600090600160a060020a0390811633909116141561026c576005805473ffffffffffffffffffffffffffffffffffffffff19168317905560408051600160a060020a038416815290517f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc9181900360200190a150600161026c565b3461000257610515610164565b34610002576105156004356024356000336106cf610164565b3461000257604080516020604435600481810135601f81018490048402850184019095528484526105159481359460248035959394606494929391019181908401838280828437509496505050505050506000836107b781855b33600160a060020a03908116600081815260086020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b346100025761052960065481565b3461000257610529600435602435600160a060020a0382811660009081526008602090815260408083209385168352929052205461045a565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156105075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b604080519115158252519081900360200190f35b60408051918252519081900360200190f35b6040805160ff9092168252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161057c57829003601f168201915b505050505081565b15806105bb5750600554600160a060020a03908116908216145b156106c7578330600160a060020a031681600160a060020a03161415156106c557600160a060020a0386166000908152600760205260409020548490108015906106255750600860209081526040600081812033600160a060020a03168252909252902054849010155b80156106315750600084115b156106c057600160a060020a03858116600081815260076020908152604080832080548a0190558a851680845281842080548b90039055600883528184203390961684529482529182902080548990039055815188815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600192506106c5565b600092505b505b509392505050565b15806106e95750600554600160a060020a03908116908216145b156107b0578330600160a060020a031681600160a060020a03161415156107ae5733600160a060020a03166000908152600760205260409020548490108015906107335750600084115b156107a95733600160a060020a03908116600081815260076020908152604080832080548a90039055938916808352918490208054890190558351888152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600192506107ae565b600092505b505b5092915050565b156106c75780600160a060020a0316638f4ffcb1338630876040518560e060020a0281526004018085600160a060020a0316815260200184815260200183600160a060020a03168152602001806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561085f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b156100025760325a03f11561000257505050600191506106c756", 
  "address": "0x888666ca69e0f178ded6d75b5726cee99a87d698", 
  "balance": "0 Ether"
 }, 
 "0xabbb6bebfa05aa13e908eaa492bd7a8343760477": {
  "name": "ReplaySafeSplit", 
  "transactions": "13429", 
  "source": "contract RequiringFunds {\r\n    modifier NeedEth () {\r\n        if (msg.value <= 0 ) throw;\r\n        _\r\n    }\r\n}\r\n\r\ncontract AmIOnTheFork {\r\n    function forked() constant returns(bool);\r\n}\r\n\r\ncontract ReplaySafeSplit is RequiringFunds {\r\n    //address private constant oracleAddress = 0x8128B12cABc6043d94BD3C4d9B9455077Eb18807;    // testnet\r\n    address private constant oracleAddress = 0x2bd2326c993dfaef84f696526064ff22eba5b362;   // mainnet\r\n    \r\n    // Fork oracle to use\r\n    AmIOnTheFork amIOnTheFork = AmIOnTheFork(oracleAddress);\r\n\r\n    // Splits the funds into 2 addresses\r\n    function split(address targetFork, address targetNoFork) NeedEth returns(bool) {\r\n        // The 2 checks are to ensure that users provide BOTH addresses\r\n        // and prevent funds to be sent to 0x0 on one fork or the other.\r\n        if (targetFork == 0) throw;\r\n        if (targetNoFork == 0) throw;\r\n\r\n        if (amIOnTheFork.forked()                   // if we are on the fork \r\n            && targetFork.send(msg.value)) {        // send the ETH to the targetFork address\r\n            return true;\r\n        } else if (!amIOnTheFork.forked()           // if we are NOT on the fork \r\n            && targetNoFork.send(msg.value)) {      // send the ETH to the targetNoFork address \r\n            return true;\r\n        }\r\n\r\n        throw;                                      // don't accept value transfer, otherwise it would be trapped.\r\n    }\r\n\r\n    // Reject value transfers.\r\n    function() {\r\n        throw;\r\n    }\r\n}", 
  "bytecode": "606060405260008054600160a060020a031916732bd2326c993dfaef84f696526064ff22eba5b36217815561019990819061003990396000f36060604052361561001f5760e060020a60003504630f2c93298114610028575b6100005b610002565b6100406004356024356000348190116100e157610002565b60408051918252519081900360200190f35b80547f16c72721000000000000000000000000000000000000000000000000000000006060908152600160a060020a0391909116906316c727219060649060209060048187876161da5a03f11561000257505060405151905080156100d25750604051600160a060020a038416908290349082818181858883f193505050505b1561010f575060015b92915050565b82600160a060020a0316600014156100f857610002565b81600160a060020a03166000141561005257610002565b600060009054906101000a9004600160a060020a0316600160a060020a03166316c727216040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151159050801561018c5750604051600160a060020a038316908290349082818181858883f193505050505b15610023575060016100db56", 
  "address": "0xabbb6bebfa05aa13e908eaa492bd7a8343760477", 
  "balance": "0 Ether"
 }
}